[
    {
        "id": "3b0451825d702cb0",
        "type": "tab",
        "label": "emulated printer",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a0bc3d9c081aaf07",
        "type": "tab",
        "label": "AAS Drucker",
        "disabled": false,
        "info": "Server Side",
        "env": []
    },
    {
        "id": "7c5f916b2c20b0c5",
        "type": "tab",
        "label": "AAS Datalake",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "28344a0f0587eb28",
        "type": "tab",
        "label": "Data transformations",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6027960fa0000f0b",
        "type": "tab",
        "label": "Human API side",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "47942db286310cd7",
        "type": "tab",
        "label": "Dashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1ca075c8ba9a118b",
        "type": "subflow",
        "name": "prepare Graph",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "36b3617238830620"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1060,
                "y": 80,
                "wires": [
                    {
                        "id": "2443882795018c47",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_chart.png"
    },
    {
        "id": "48bb845c784563a6",
        "type": "subflow",
        "name": "get Metadata and objects new",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 140,
                "wires": [
                    {
                        "id": "837b32653cd7d89d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1580,
                "y": 280,
                "wires": [
                    {
                        "id": "9d9842e1eabe756d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "bucketName",
                "type": "str",
                "value": ""
            },
            {
                "name": "prefix (optional)",
                "type": "str",
                "value": ""
            },
            {
                "name": "sufix (optional)",
                "type": "str",
                "value": ""
            },
            {
                "name": "recursive",
                "type": "bool",
                "value": "false"
            }
        ],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red-contrib-minio-all-new/minio.png",
        "status": {
            "x": 1400,
            "y": 120,
            "wires": [
                {
                    "id": "e1b60c58638122f2",
                    "port": 0
                },
                {
                    "id": "ef95ac79d71f9803",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "f2fe4f59c043dd9d",
        "type": "subflow",
        "name": "get Variable names and set them as options",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "36ed64f394827cf8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1320,
                "y": 40,
                "wires": [
                    {
                        "id": "86f997645200e061",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "bucketName",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-list-ul"
    },
    {
        "id": "ab1e0d4b6570960a",
        "type": "subflow",
        "name": "get dynamic values",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 420,
                "y": 140,
                "wires": [
                    {
                        "id": "d86b17da09bf33b4"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "bucketName",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "3cc126821293f7f2",
        "type": "mqtt-broker",
        "name": "",
        "broker": "http://127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "dca656d872d7df8d",
        "type": "minio-config",
        "name": "MinIO DCC",
        "host": "cbfe42815ba8",
        "port": "9000",
        "useSsl": false
    },
    {
        "id": "c92075dce87d46d9",
        "type": "mqtt-broker",
        "name": "",
        "broker": "http://127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "a2274fa9a4058cf2",
        "type": "minio-config",
        "name": "local test minio",
        "host": "127.0.0.1",
        "port": "9000",
        "useSsl": false
    },
    {
        "id": "24afe56e0a2e0e7c",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD.MM.YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "4201bbfad8bd6521",
        "type": "ui_tab",
        "name": "Products",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "b2abbb181347d4a3",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "b0da188db5c72c59",
        "type": "ui_tab",
        "name": "Charges",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "0e464217c8d35a88",
        "type": "ui_group",
        "name": "Charges",
        "tab": "6a7529064a1fc1c5",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "dde866927cd90425",
        "type": "ui_group",
        "name": "Default",
        "tab": "ebb1ed1c.5ebe2",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "868121779bf30230",
        "type": "ui_group",
        "name": "Charts",
        "tab": "1356b7edb0ae72b0",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "944e1e6723f69332",
        "type": "ui_group",
        "name": "Download",
        "tab": "1356b7edb0ae72b0",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4582894a7bd0bf5f",
        "type": "ui_tab",
        "name": "Products",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5f9c4a7ed3853531",
        "type": "ui_group",
        "name": "Charges",
        "tab": "ffa5d9bbdaa2ed12",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c9d51eb2e4671553",
        "type": "ui_group",
        "name": "Default",
        "tab": "a0f913ad9ba59d24",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "a0f913ad9ba59d24",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ffa5d9bbdaa2ed12",
        "type": "ui_tab",
        "name": "Charges",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "413d7a35da993ae7",
        "type": "ui_group",
        "name": "Charts",
        "tab": "4582894a7bd0bf5f",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "5bfa078fd03ae78e",
        "type": "ui_group",
        "name": "Download",
        "tab": "4582894a7bd0bf5f",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ac13023e2e922fa0",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD.MM.YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "c98c44f66ac2c940",
        "type": "csv",
        "z": "1ca075c8ba9a118b",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 630,
        "y": 80,
        "wires": [
            [
                "4d8d98090a60bc92"
            ]
        ]
    },
    {
        "id": "2443882795018c47",
        "type": "function",
        "z": "1ca075c8ba9a118b",
        "name": "graph generate",
        "func": "function toTimestamp(strDate){\n     var datum = Date.parse(strDate);\n     return datum/1000;\n    }\nvar payload=msg.payload;\n\n\nvar data_out=[];\nvar series = [];\nvar labels = [];\n\n//if only a single name is defined create an array\nif(!Array.isArray(msg.names)){\n    msg.names =[msg.names];\n}\n\n//in this loops j iterates through the payloads csv of the different products\n// i iterates through the timesteps\n// and key iterates through the column names\nfor(let j = 0; j< payload.length; j++){\n    for(let key of msg.names){\n        var tempSeries = [];\n        for(let i=0;i<payload[j].length;i++){\n            if(payload[j][i][key] !== undefined){\n                var temp={ \"x\": payload[j][i].normalizedTimestamp, \"y\":parseInt( payload[j][i][key])};\n                tempSeries.push(temp);\n            }\n        }\n        series.push(msg.ids[j] +\"/\"+ key)\n        labels.push(msg.ids[j] +\"/\"+ key)\n        data_out.push(tempSeries);\n    }\n}\n\nmsg.payload=[{\n\"series\": series,\n\"data\": data_out,\n\"labels\": labels\n}];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "c77ceb5efde348a3",
        "type": "change",
        "z": "1ca075c8ba9a118b",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.names",
                "pt": "msg",
                "to": "names",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "payload.ids",
                "pt": "msg",
                "to": "ids",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "payload.csv",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 80,
        "wires": [
            [
                "c98c44f66ac2c940"
            ]
        ]
    },
    {
        "id": "36b3617238830620",
        "type": "json",
        "z": "1ca075c8ba9a118b",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "08415322c47d7d0d"
            ]
        ]
    },
    {
        "id": "08415322c47d7d0d",
        "type": "split",
        "z": "1ca075c8ba9a118b",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 310,
        "y": 80,
        "wires": [
            [
                "c77ceb5efde348a3"
            ]
        ]
    },
    {
        "id": "4d8d98090a60bc92",
        "type": "join",
        "z": "1ca075c8ba9a118b",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 750,
        "y": 80,
        "wires": [
            [
                "2443882795018c47"
            ]
        ]
    },
    {
        "id": "ff5cdb7a8de1b25c",
        "type": "buckets",
        "z": "48bb845c784563a6",
        "buckets_name": "list objects",
        "host": "a2274fa9a4058cf2",
        "buckets_operation": "listObjectsV2WithMetadata",
        "buckets_bucket": "",
        "buckets_region": "",
        "buckets_prefix": "",
        "buckets_recursive": false,
        "buckets_start_after": "",
        "x": 490,
        "y": 140,
        "wires": [
            [
                "899afe85c07ad0c5"
            ],
            []
        ]
    },
    {
        "id": "c46b2b1be09f1288",
        "type": "function",
        "z": "48bb845c784563a6",
        "name": "set get parameters",
        "func": "if(msg.payload.name !== undefined){\n    msg.objectName = msg.payload.name;\n}else{\n    if(msg.payload.prefix !== undefined){\n        msg.objectName = msg.payload.prefix;\n    }\n    \n    //msg.sufix overwrites the env parameter\n    if(msg.sufix === undefined || msg.sufix === \"\"){\n        if(env.get(\"sufix (optional)\") !== undefined && env.get(\"sufix (optional)\") !== \"\"){\n            msg.objectName = msg.objectName + env.get(\"sufix (optional)\");\n        }\n    }else{\n        msg.objectName = msg.objectName + msg.sufix;\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 260,
        "wires": [
            [
                "51049ba2078587b9"
            ]
        ]
    },
    {
        "id": "8d62d0107e2ab96d",
        "type": "objects",
        "z": "48bb845c784563a6",
        "objects_name": "get objects",
        "host": "a2274fa9a4058cf2",
        "objects_operation": "getObject",
        "objects_bucket": "",
        "objects_object": "",
        "objects_offset": "",
        "objects_length": "",
        "objects_stream": "",
        "objects_size": "",
        "objects_metadata": "",
        "objects_sourceobject": "",
        "objects_conditions": "",
        "objects_objectslist": [],
        "objects_prefix": "",
        "objects_etag": "",
        "objects_datetime": "",
        "x": 1010,
        "y": 260,
        "wires": [
            [
                "948a2aada4377d14"
            ],
            []
        ]
    },
    {
        "id": "05f8b4a8ada3c125",
        "type": "split",
        "z": "48bb845c784563a6",
        "name": "split message into one message per object",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 250,
        "y": 260,
        "wires": [
            [
                "c46b2b1be09f1288"
            ]
        ]
    },
    {
        "id": "837b32653cd7d89d",
        "type": "function",
        "z": "48bb845c784563a6",
        "name": "start after last checked Object",
        "func": "lastCheckedObject = flow.get(\"lastCheckedObject\")\nif ( lastCheckedObject !== undefined){\n    //msg.startAfter = lastCheckedObject\n}\n\nif(msg.bucketName === undefined || msg.bucketName === \"\"){\n    msg.bucketName = env.get('bucketName');\n}\n\nif(msg.prefix === undefined||msg.prefix === \"\"){\n    msg.prefix = env.get(\"prefix (optional)\");\n}\nif(msg.recursive === undefined){\n    msg.recursive = env.get(\"recursive\");\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 140,
        "wires": [
            [
                "ff5cdb7a8de1b25c"
            ]
        ]
    },
    {
        "id": "948a2aada4377d14",
        "type": "function",
        "z": "48bb845c784563a6",
        "name": "merge object with metadata",
        "func": "//Because the getObject Method does not return the metadata \n//we get the metadata from the List of objects\n\nlet index;\n\n//get the index\nfor(i=0 ; i < msg.objectList.length ; i++){\n    if(msg.objectName === msg.objectList[i].name){\n        index = i;\n        break;\n    }\n}\nmsg.index = index\n\n//copy metadata\nif(index !== undefined){\n    msg.metaData = msg.objectList[i].metadata;\n    //maybe extend wih last modified etc\n}\n\nflow.set(\"lastCheckedObject\", msg.objectName)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 260,
        "wires": [
            [
                "9d9842e1eabe756d"
            ]
        ]
    },
    {
        "id": "899afe85c07ad0c5",
        "type": "change",
        "z": "48bb845c784563a6",
        "name": "set payload and ojectlist",
        "rules": [
            {
                "t": "move",
                "p": "payload.listObjectsV2WithMetadata",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "objectList",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 140,
        "wires": [
            [
                "05f8b4a8ada3c125",
                "b871d95bd1fa49cb",
                "ef95ac79d71f9803"
            ]
        ]
    },
    {
        "id": "ef95ac79d71f9803",
        "type": "function",
        "z": "48bb845c784563a6",
        "name": "set state",
        "func": "msg.payload = \"found \" + msg.payload.length + \" new objects\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "b871d95bd1fa49cb",
        "type": "delay",
        "z": "48bb845c784563a6",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 980,
        "y": 100,
        "wires": [
            [
                "e1b60c58638122f2"
            ]
        ]
    },
    {
        "id": "e1b60c58638122f2",
        "type": "change",
        "z": "48bb845c784563a6",
        "name": "delete state",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "51049ba2078587b9",
        "type": "delay",
        "z": "48bb845c784563a6",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "10",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 800,
        "y": 260,
        "wires": [
            [
                "8d62d0107e2ab96d"
            ]
        ]
    },
    {
        "id": "fd24efbf589dd3df",
        "type": "comment",
        "z": "48bb845c784563a6",
        "name": "limit the msg rate because getobjects cant handle it",
        "info": "",
        "x": 890,
        "y": 220,
        "wires": []
    },
    {
        "id": "9d9842e1eabe756d",
        "type": "change",
        "z": "48bb845c784563a6",
        "name": "delete parameters",
        "rules": [
            {
                "t": "delete",
                "p": "bucketName",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "prefix",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "sufix",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1330,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "36ed64f394827cf8",
        "type": "function",
        "z": "f2fe4f59c043dd9d",
        "name": "set objectName",
        "func": "if(Array.isArray(msg.payload)){\n    msg.ids = msg.payload;\n    //just check fpr variables of the first id\n    msg.payload = msg.payload[0];\n}\nmsg.objectName = msg.payload + \"/dynamicValues.csv\";\nmsg.bucketName = env.get(\"bucketName\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 40,
        "wires": [
            [
                "193d608e3a9ab609"
            ]
        ]
    },
    {
        "id": "193d608e3a9ab609",
        "type": "objects",
        "z": "f2fe4f59c043dd9d",
        "objects_name": "get csv",
        "host": "a2274fa9a4058cf2",
        "objects_operation": "getObject",
        "objects_bucket": "",
        "objects_object": "",
        "objects_offset": "",
        "objects_length": "",
        "objects_stream": "",
        "objects_size": "",
        "objects_metadata": "",
        "objects_sourceobject": "",
        "objects_conditions": "",
        "objects_objectslist": [],
        "objects_prefix": "",
        "objects_etag": "",
        "objects_datetime": "",
        "x": 400,
        "y": 40,
        "wires": [
            [
                "b10f5a4588cba882"
            ],
            []
        ]
    },
    {
        "id": "b10f5a4588cba882",
        "type": "function",
        "z": "f2fe4f59c043dd9d",
        "name": "set payload to objectData",
        "func": "msg.payload = msg.payload.objectData.toString();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 40,
        "wires": [
            [
                "1792224916fb7517"
            ]
        ]
    },
    {
        "id": "1792224916fb7517",
        "type": "csv",
        "z": "f2fe4f59c043dd9d",
        "name": "convert csv String to Object",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 840,
        "y": 40,
        "wires": [
            [
                "86f997645200e061"
            ]
        ]
    },
    {
        "id": "86f997645200e061",
        "type": "function",
        "z": "f2fe4f59c043dd9d",
        "name": "set columnNames as options",
        "func": "msg.options = msg.columns.split(\",\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "1aafd19b86e86b6d",
        "type": "objects",
        "z": "ab1e0d4b6570960a",
        "objects_name": "",
        "host": "a2274fa9a4058cf2",
        "objects_operation": "getObject",
        "objects_bucket": "gold-zone",
        "objects_object": "",
        "objects_offset": "",
        "objects_length": "",
        "objects_stream": "",
        "objects_size": "",
        "objects_metadata": "",
        "objects_sourceobject": "",
        "objects_conditions": "",
        "objects_objectslist": [],
        "objects_prefix": "",
        "objects_etag": "",
        "objects_datetime": "",
        "x": 1230,
        "y": 300,
        "wires": [
            [
                "20db79c52033448f"
            ],
            []
        ]
    },
    {
        "id": "0d84ebcd2a7b88db",
        "type": "csv",
        "z": "ab1e0d4b6570960a",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1930,
        "y": 220,
        "wires": [
            [
                "06e47453133746c4"
            ]
        ]
    },
    {
        "id": "da4c3ed5f350a278",
        "type": "csv",
        "z": "ab1e0d4b6570960a",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\r\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2310,
        "y": 220,
        "wires": [
            [
                "a9262c8cf2bc3627",
                "cc933c002c895636"
            ]
        ]
    },
    {
        "id": "06e47453133746c4",
        "type": "function",
        "z": "ab1e0d4b6570960a",
        "name": "get only the wanted variable",
        "func": "csvPart = [];\nstartIndex = undefined;\nendIndex = undefined;\n//if only a single name is defined create an array\nif(!Array.isArray(msg.names)){\n    msg.names =[msg.names];\n}\nfor (let i = 0; i < msg.payload.length; i++) {\n    object = msg.payload[i];\n    temp = {}    \n    temp[\"normalizedTimestamp\"] = object.normalizedTimestamp;\n    for(var name of msg.names){\n        if(object[name] !== undefined){\n            temp[name] = object[name];\n        }\n    }\n    //only etry if one of the varaibles was defined\n    if(Object.keys(temp).length !=1){\n        csvPart.push(temp)\n    }\n    //csvPart.push({\"timestamp\": object.timestamp, msg.name: object[msg.name]});\n}\nmsg.payload = csvPart;\nmsg.columns = \"normalizedTimestamp\"\nfor (let name of msg.names){\n    msg.columns = msg.columns + \",\" + name;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2120,
        "y": 220,
        "wires": [
            [
                "da4c3ed5f350a278"
            ]
        ]
    },
    {
        "id": "d86b17da09bf33b4",
        "type": "function",
        "z": "ab1e0d4b6570960a",
        "name": "",
        "func": "msg.startTime = msg.payload.startTime;\nmsg.endTime = msg.payload.endTime;\nmsg.names = msg.payload.names;\nmsg.bucketName = env.get(\"bucketName\");\n\nmsg.ids = msg.payload.ids;\n// set payload as array of objectnames to split into one msg per id\ntemp = [];\nfor (let id of msg.payload.ids){\n    temp.push(id + \"/dynamicValues.csv\");\n}\nmsg.payload = temp\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 220,
        "wires": [
            [
                "e79a7b678f9f3157"
            ]
        ]
    },
    {
        "id": "9f020f774214906f",
        "type": "change",
        "z": "ab1e0d4b6570960a",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.objectData",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1590,
        "y": 220,
        "wires": [
            [
                "105456dfe53de01e"
            ]
        ]
    },
    {
        "id": "20db79c52033448f",
        "type": "switch",
        "z": "ab1e0d4b6570960a",
        "name": "if getObject is true",
        "property": "payload.getObject",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1350,
        "y": 220,
        "wires": [
            [
                "9f020f774214906f"
            ]
        ]
    },
    {
        "id": "ec9673d5b81ebce3",
        "type": "http response",
        "z": "ab1e0d4b6570960a",
        "name": "",
        "statusCode": "200",
        "headers": {
            "Content-Type": "text/csv",
            "Content-Disposition": "attachment; filename=variable.csv"
        },
        "x": 2860,
        "y": 320,
        "wires": []
    },
    {
        "id": "105456dfe53de01e",
        "type": "function",
        "z": "ab1e0d4b6570960a",
        "name": "",
        "func": "msg.payload = msg.payload.toString();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 220,
        "wires": [
            [
                "0d84ebcd2a7b88db"
            ]
        ]
    },
    {
        "id": "a9262c8cf2bc3627",
        "type": "function",
        "z": "ab1e0d4b6570960a",
        "name": "",
        "func": "csv = msg.payload\nmsg.payload = {}\nmsg.payload.csv = csv;\nmsg.payload.names = msg.names;\nmsg.payload.ids = msg.ids;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2440,
        "y": 220,
        "wires": [
            [
                "829157e991e84ac0"
            ]
        ]
    },
    {
        "id": "e79a7b678f9f3157",
        "type": "split",
        "z": "ab1e0d4b6570960a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 750,
        "y": 180,
        "wires": [
            [
                "a2124e92430572bc"
            ]
        ]
    },
    {
        "id": "a2124e92430572bc",
        "type": "change",
        "z": "ab1e0d4b6570960a",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "objectName",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 180,
        "wires": [
            [
                "990c3677fa400972"
            ]
        ]
    },
    {
        "id": "829157e991e84ac0",
        "type": "join",
        "z": "ab1e0d4b6570960a",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 2620,
        "y": 260,
        "wires": [
            [
                "ec9673d5b81ebce3"
            ]
        ]
    },
    {
        "id": "cc933c002c895636",
        "type": "debug",
        "z": "ab1e0d4b6570960a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2480,
        "y": 340,
        "wires": []
    },
    {
        "id": "990c3677fa400972",
        "type": "delay",
        "z": "ab1e0d4b6570960a",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "2",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 980,
        "y": 300,
        "wires": [
            [
                "1aafd19b86e86b6d"
            ]
        ]
    },
    {
        "id": "de93d38db6bc58fa",
        "type": "tcp out",
        "z": "3b0451825d702cb0",
        "host": "127.0.0.1",
        "port": "2000",
        "beserver": "client",
        "base64": false,
        "end": false,
        "name": "",
        "x": 910,
        "y": 140,
        "wires": []
    },
    {
        "id": "dae37f660e61ddea",
        "type": "inject",
        "z": "3b0451825d702cb0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "camera",
        "payload": "testimage",
        "payloadType": "str",
        "x": 190,
        "y": 140,
        "wires": [
            [
                "7bbc98cb7ae88095",
                "de93d38db6bc58fa"
            ]
        ]
    },
    {
        "id": "21d6f5caced38524",
        "type": "comment",
        "z": "3b0451825d702cb0",
        "name": "test camera input",
        "info": "",
        "x": 150,
        "y": 100,
        "wires": []
    },
    {
        "id": "9fd1de8610afbfaf",
        "type": "http in",
        "z": "3b0451825d702cb0",
        "name": "job http Endpoint",
        "url": "/api/job",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 380,
        "wires": [
            [
                "5769a746239894ea",
                "4d6d8567d602e11f"
            ]
        ]
    },
    {
        "id": "de939be201bfaa47",
        "type": "http response",
        "z": "3b0451825d702cb0",
        "name": "job response",
        "statusCode": "200",
        "headers": {},
        "x": 630,
        "y": 380,
        "wires": []
    },
    {
        "id": "ec9b3c9d600c796e",
        "type": "http in",
        "z": "3b0451825d702cb0",
        "name": "printer http endpoint",
        "url": "/api/printer",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 460,
        "wires": [
            [
                "0eebf9f39be549a0"
            ]
        ]
    },
    {
        "id": "90b2e0eb31dc0c54",
        "type": "http response",
        "z": "3b0451825d702cb0",
        "name": "printer response",
        "statusCode": "200",
        "headers": {},
        "x": 560,
        "y": 460,
        "wires": []
    },
    {
        "id": "5769a746239894ea",
        "type": "template",
        "z": "3b0451825d702cb0",
        "d": true,
        "name": "/api/job Data",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "plain",
        "template": "{\n  \"job\": {\n    \"file\": {\n      \"name\": \"whistle_v2.gcode\",\n      \"origin\": \"local\",\n      \"size\": 1468987,\n      \"date\": 1378847754\n    },\n    \"estimatedPrintTime\": 8811,\n    \"filament\": {\n      \"tool0\": {\n        \"length\": 810,\n        \"volume\": 5.36\n      }\n    }\n  },\n  \"progress\": {\n    \"completion\": 0.2298468264184775,\n    \"filepos\": 337942,\n    \"printTime\": 276,\n    \"printTimeLeft\": 912\n  },\n  \"state\": \"Printing\"\n}",
        "output": "json",
        "x": 410,
        "y": 380,
        "wires": [
            [
                "de939be201bfaa47"
            ]
        ]
    },
    {
        "id": "0eebf9f39be549a0",
        "type": "template",
        "z": "3b0451825d702cb0",
        "name": "/api/printer data",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "plain",
        "template": "{\n  \"temperature\": {\n    \"tool0\": {\n      \"actual\": 214.8821,\n      \"target\": 220.0,\n      \"offset\": 0\n    },\n    \"tool1\": {\n      \"actual\": 25.3,\n      \"target\": null,\n      \"offset\": 0\n    },\n    \"bed\": {\n      \"actual\": 50.221,\n      \"target\": 70.0,\n      \"offset\": 5\n    },\n    \"history\": [\n      {\n        \"time\": 1395651928,\n        \"tool0\": {\n          \"actual\": 214.8821,\n          \"target\": 220.0\n        },\n        \"tool1\": {\n          \"actual\": 25.3,\n          \"target\": null\n        },\n        \"bed\": {\n          \"actual\": 50.221,\n          \"target\": 70.0\n        }\n      },\n      {\n        \"time\": 1395651926,\n        \"tool0\": {\n          \"actual\": 212.32,\n          \"target\": 220.0\n        },\n        \"tool1\": {\n          \"actual\": 25.1,\n          \"target\": null\n        },\n        \"bed\": {\n          \"actual\": 49.1123,\n          \"target\": 70.0\n        }\n      }\n    ]\n  },\n  \"sd\": {\n    \"ready\": true\n  },\n  \"state\": {\n    \"text\": \"Operational\",\n    \"flags\": {\n      \"operational\": true,\n      \"paused\": false,\n      \"printing\": false,\n      \"cancelling\": false,\n      \"pausing\": false,\n      \"sdReady\": true,\n      \"error\": false,\n      \"ready\": true,\n      \"closedOrError\": false\n    }\n  }\n}",
        "output": "json",
        "x": 370,
        "y": 460,
        "wires": [
            [
                "90b2e0eb31dc0c54"
            ]
        ]
    },
    {
        "id": "cd1a9528e4c05220",
        "type": "comment",
        "z": "3b0451825d702cb0",
        "name": "test rest api",
        "info": "",
        "x": 116.66666412353516,
        "y": 288.33331298828125,
        "wires": []
    },
    {
        "id": "4d6d8567d602e11f",
        "type": "function",
        "z": "3b0451825d702cb0",
        "name": "",
        "func": "info = context.get(\"info\");\ncounter = context.get(\"counter\")\n\nif (counter % 10 == 0){\n    info = info + 1;\n    msg.info = info\n    if(info ==4){\n        info = 0;\n    }\n    context.set(\"info\", info)\n}\n\nif (info==0){\n    msg.payload = {\n                  \"job\": {\n                    \"file\": {\n                      \"name\": \"test1.gcode\",\n                      \"origin\": \"local\",\n                      \"size\": 1468987,\n                      \"date\": 1378847754\n                    },\n                    \"estimatedPrintTime\": 8811,\n                    \"filament\": {\n                      \"tool0\": {\n                        \"length\": 810,\n                        \"volume\": 5.36\n                      }\n                    }\n                  },\n                  \"progress\": {\n                    \"completion\": 0.2298468264184775,\n                    \"filepos\": 337942,\n                    \"printTime\": 276,\n                    \"printTimeLeft\": 912\n                  },\n                  \"state\": \"Printing\"\n                }\n    }else if(info == 1){\n        msg.payload = {\n                  \"job\": {\n                    \"file\": {\n                      \"name\": \"test1.gcode\",\n                      \"origin\": \"local\",\n                      \"size\": 1468987,\n                      \"date\": 1378847754\n                    },\n                    \"estimatedPrintTime\": 9000,\n                    \"filament\": {\n                      \"tool0\": {\n                        \"length\": 810,\n                        \"volume\": 5.36\n                      }\n                    }\n                  },\n                  \"progress\": {\n                    \"completion\": 0.1,\n                    \"filepos\": 337942,\n                    \"printTime\": 260,\n                    \"printTimeLeft\": 920\n                  },\n                  \"state\": \"Printing\"\n                }\n    }else if(info == 2){\n        msg.payload={\n                    \"job\": {\n                        \"file\": {\n                          \"name\": \"test2.gcode\",\n                          \"origin\": \"local\",\n                          \"size\": 1468987,\n                          \"date\": 1378847754\n                        },\n                        \"estimatedPrintTime\": 8811,\n                        \"filament\": {\n                          \"tool0\": {\n                            \"length\": 810,\n                            \"volume\": 5.36\n                          }\n                        }\n                      },\n                      \"progress\": {\n                        \"completion\": 0.2298468264184775,\n                        \"filepos\": 400000,\n                        \"printTime\": 300,\n                        \"printTimeLeft\": 912\n                      },\n                      \"state\": \"Printing\"\n                    }\n    }else{\n        msg.payload={\n                    \"job\": {\n                        \"file\": {\n                          \"name\": \"test2.gcode\",\n                          \"origin\": \"local\",\n                          \"size\": 1468987,\n                          \"date\": 1378847754\n                        },\n                        \"estimatedPrintTime\": 9000,\n                        \"filament\": {\n                          \"tool0\": {\n                            \"length\": 810,\n                            \"volume\": 5.36\n                          }\n                        }\n                      },\n                      \"progress\": {\n                        \"completion\": 0.1,\n                        \"filepos\": 3000000,\n                        \"printTime\": 280,\n                        \"printTimeLeft\": 900\n                      },\n                      \"state\": \"Printing\"\n                    }\n    }\ncontext.set(\"counter\", counter + 1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Der Code hier wird ausgeführt,\n// wenn der Node gestartet wird\ncontext.set(\"counter\", 0)\ncontext.set(\"info\", 0)",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 300,
        "wires": [
            [
                "de939be201bfaa47",
                "ac28714f99eb5ee9"
            ]
        ]
    },
    {
        "id": "7bbc98cb7ae88095",
        "type": "file in",
        "z": "3b0451825d702cb0",
        "d": true,
        "name": "",
        "filename": "C:\\Users\\Sebastian\\Downloads\\391762.jpg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 530,
        "y": 80,
        "wires": [
            [
                "de93d38db6bc58fa"
            ]
        ]
    },
    {
        "id": "ac28714f99eb5ee9",
        "type": "debug",
        "z": "3b0451825d702cb0",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 300,
        "wires": []
    },
    {
        "id": "f543f734c017ea03",
        "type": "inject",
        "z": "a0bc3d9c081aaf07",
        "name": "start setup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 170,
        "y": 100,
        "wires": [
            [
                "f62e77b9f1f8486b"
            ]
        ]
    },
    {
        "id": "2dc18d445ec06946",
        "type": "debug",
        "z": "a0bc3d9c081aaf07",
        "name": "STD OUT",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 100,
        "wires": []
    },
    {
        "id": "e9f733ada76b7b12",
        "type": "inject",
        "z": "a0bc3d9c081aaf07",
        "d": true,
        "name": "start repeating http requests",
        "props": [
            {
                "p": "headers",
                "v": "{\"X-Api-Key\":\"92F38461306745C08E396994229D6946\"}",
                "vt": "json"
            },
            {
                "p": "url",
                "v": "192.168.137.95/api/",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 360,
        "wires": [
            [
                "d4e74fe62845f0d8",
                "c9c3d20b7648ec3d",
                "ad7172fea409e527"
            ]
        ]
    },
    {
        "id": "9ae68ef6a2448576",
        "type": "http request",
        "z": "a0bc3d9c081aaf07",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 670,
        "y": 320,
        "wires": [
            [
                "3b9841ea9a945abc"
            ]
        ]
    },
    {
        "id": "d4e74fe62845f0d8",
        "type": "function",
        "z": "a0bc3d9c081aaf07",
        "name": "printer state",
        "func": "msg.url = msg.url + \"printer\";\nmsg.topic = \"printerState\"\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 360,
        "wires": [
            [
                "9ae68ef6a2448576"
            ]
        ]
    },
    {
        "id": "366c558e2d38a115",
        "type": "tcp in",
        "z": "a0bc3d9c081aaf07",
        "name": "TCP Endpoint for frames",
        "server": "server",
        "host": "",
        "port": "2000",
        "datamode": "stream",
        "datatype": "utf8",
        "newline": "",
        "topic": "camera",
        "base64": false,
        "x": 650,
        "y": 220,
        "wires": [
            [
                "3b9841ea9a945abc"
            ]
        ]
    },
    {
        "id": "f62e77b9f1f8486b",
        "type": "function",
        "z": "a0bc3d9c081aaf07",
        "name": "initiate variables",
        "func": "msg.AAS={\n    header:{info: \"diese AAS sendet automatisch Nachrichten an S3 Buckets\"},\n    body: {\n        Dataelements: [\"currentframe\", \"printerstate\", \"jobinfo\"],\n        Collections_of_data_Elements:[],\n        Views:[],\n        standardServices:{\n            subscribeAll:{\n                service_Specification: \"Subscribe to camera, printer info, and job info by sending http-request to <hostip>/subscribeAll\"\n            },\n            unsubscribeAll:{\n                service_Specification: \"Usubscribe from camera, printer info, and job info by sending http-request to <hostip>/unsubscribeAll\"\n            },\n            subscribeCamera:{\n                service_Specification: \"subscribe to camera Frames via a TCP stream\"\n            },\n            subscribePrinterState:{\n                service_Specification: \"subscribe to printer state information\"\n            },\n            subscribeJobState:{\n                service_Spezification: \"subscribe to job state information\"\n            }\n        },\n        References:[]\n    }\n}\nflow.set(\"AAS\", msg.AAS)\nmsg.payload = Date.now()\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 100,
        "wires": [
            [
                "2dc18d445ec06946"
            ]
        ]
    },
    {
        "id": "e0821d749dd3cb85",
        "type": "comment",
        "z": "a0bc3d9c081aaf07",
        "name": "get webcam frames",
        "info": "",
        "x": 640,
        "y": 180,
        "wires": []
    },
    {
        "id": "3b9841ea9a945abc",
        "type": "function",
        "z": "a0bc3d9c081aaf07",
        "name": "",
        "func": "new_msg = {\"payload\": {\"metaData\":{}}}\n\n// SET AAS Values\nif (msg.topic == \"camera\") {\n    flow.set(\"AAS.body.Dataelements[0]\", msg.payload)\n}\nelse if (msg.topic == \"printerState\"){\n    flow.set(\"AAS.body.Dataelements[1]\", msg.payload)\n}\nelse if (msg.topic == \"jobState\"){\n    \n    currentJob = JSON.parse(msg.payload)\n    \n    lastKnownJob = flow.get(\"AAS.body.Dataelements[2]\");\n    \n    \n    //is there already a jobid?\n    if (lastKnownJob.id === undefined){\n            currentJob.id = 0;\n            currentJob.charge = 0;\n            new_msg.test = 1;\n    }else{\n        new_msg.currentJob = currentJob;\n        new_msg.lastKnownJob = lastKnownJob;\n        //is the current job on a new file? -> must be new job\n        if(JSON.stringify(currentJob.job.file) !== JSON.stringify(lastKnownJob.job.file)){\n            currentJob.id = lastKnownJob.id + 1;\n            currentJob.charge = lastKnownJob.charge + 1;\n            new_msg.test = 2;\n        //is current job on same file but less progress? -> must be new job\n        }else if(currentJob.progress.printTime<lastKnownJob.progress.printTime){\n            currentJob.id = lastKnownJob.id + 1;\n            currentJob.charge = lastKnownJob.charge;\n            new_msg.test = 3;\n        //else its the same job as before\n        }else{\n            currentJob.id = lastKnownJob.id\n            currentJob.charge = lastKnownJob.charge;\n            new_msg.test = 4;\n        }\n    }\n    new_msg.payload.metaData.productId = currentJob.id;\n    new_msg.payload.metaData.charge = currentJob.charge;\n    \n    flow.set(\"AAS.body.Dataelements[2]\", currentJob)\n}\n\n//set msg info into payload so it gets send via tcp \nnew_msg.payload.payload = msg.payload;\ni=context.get(\"i\");\nnew_msg.payload.metaData.time = i*5000 + 1643837209006;\ncontext.set(\"i\", i +1);\n//Date.now()\nnew_msg.payload.metaData.topic = msg.topic;\n\nreturn new_msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"i\", 0);",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 320,
        "wires": [
            [
                "8ecda61828f2f73e"
            ]
        ]
    },
    {
        "id": "057a2e80921e6502",
        "type": "inject",
        "z": "a0bc3d9c081aaf07",
        "name": "start Sending (default)",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 240,
        "y": 720,
        "wires": [
            [
                "f06a80272c90bc20"
            ]
        ]
    },
    {
        "id": "42d1116c79144137",
        "type": "inject",
        "z": "a0bc3d9c081aaf07",
        "name": "stop Sending",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sending",
        "payload": "true",
        "payloadType": "bool",
        "x": 270,
        "y": 960,
        "wires": [
            [
                "eeb4c1415bec9560"
            ]
        ]
    },
    {
        "id": "719d08cdcbadec7f",
        "type": "change",
        "z": "a0bc3d9c081aaf07",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sending",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 840,
        "wires": [
            [
                "19fe16737de36f93"
            ]
        ]
    },
    {
        "id": "6257fbdf9c7b268b",
        "type": "comment",
        "z": "a0bc3d9c081aaf07",
        "name": "control sending And sending API",
        "info": "",
        "x": 230,
        "y": 660,
        "wires": []
    },
    {
        "id": "2727d0735d7a392f",
        "type": "switch",
        "z": "a0bc3d9c081aaf07",
        "name": "",
        "property": "sending",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1250,
        "y": 320,
        "wires": [
            [
                "12484ca2a9e57071",
                "2dc18d445ec06946"
            ]
        ]
    },
    {
        "id": "c9c3d20b7648ec3d",
        "type": "function",
        "z": "a0bc3d9c081aaf07",
        "name": "current job information",
        "func": "msg.url = msg.url + \"job\"\nmsg.topic = \"jobState\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 500,
        "wires": [
            [
                "a9658af5a9c3d912"
            ]
        ]
    },
    {
        "id": "63192cddb0939f5d",
        "type": "inject",
        "z": "a0bc3d9c081aaf07",
        "name": "start job test request",
        "props": [
            {
                "p": "url",
                "v": "127.0.0.1:1880/api/",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "x": 180,
        "y": 540,
        "wires": [
            [
                "c9c3d20b7648ec3d"
            ]
        ]
    },
    {
        "id": "8fa656c87c1ac9a6",
        "type": "comment",
        "z": "a0bc3d9c081aaf07",
        "name": "initiate variables",
        "info": "",
        "x": 160,
        "y": 40,
        "wires": []
    },
    {
        "id": "c2f85d3471ce1b4a",
        "type": "http in",
        "z": "a0bc3d9c081aaf07",
        "name": "Subscribe all http Endpoint",
        "url": "/AAS/subscribeAll",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 800,
        "wires": [
            [
                "f06a80272c90bc20"
            ]
        ]
    },
    {
        "id": "f06a80272c90bc20",
        "type": "change",
        "z": "a0bc3d9c081aaf07",
        "name": "set payload and topic",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "sending",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 800,
        "wires": [
            [
                "719d08cdcbadec7f"
            ]
        ]
    },
    {
        "id": "eeb4c1415bec9560",
        "type": "change",
        "z": "a0bc3d9c081aaf07",
        "name": "set payload and topic",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "sending",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 900,
        "wires": [
            [
                "719d08cdcbadec7f"
            ]
        ]
    },
    {
        "id": "dfe91ec4d75f13af",
        "type": "http in",
        "z": "a0bc3d9c081aaf07",
        "name": "Subscribe all http Endpoint",
        "url": "/AAS/unsubscribeAll",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 900,
        "wires": [
            [
                "eeb4c1415bec9560"
            ]
        ]
    },
    {
        "id": "c3d35a9656e53497",
        "type": "http in",
        "z": "a0bc3d9c081aaf07",
        "name": "generel info",
        "url": "/AAS",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 570,
        "y": 40,
        "wires": [
            [
                "c09e5edb085d49b0"
            ]
        ]
    },
    {
        "id": "7246a727c1aa1a7e",
        "type": "http response",
        "z": "a0bc3d9c081aaf07",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1200,
        "y": 40,
        "wires": []
    },
    {
        "id": "c09e5edb085d49b0",
        "type": "function",
        "z": "a0bc3d9c081aaf07",
        "name": "set msg.payload to AAS object",
        "func": "msg.payload = flow.get(\"AAS\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 40,
        "wires": [
            [
                "7246a727c1aa1a7e"
            ]
        ]
    },
    {
        "id": "58a53251b5c84056",
        "type": "http response",
        "z": "a0bc3d9c081aaf07",
        "name": "response to (un)subscription",
        "statusCode": "200",
        "headers": {},
        "x": 1500,
        "y": 840,
        "wires": []
    },
    {
        "id": "19fe16737de36f93",
        "type": "function",
        "z": "a0bc3d9c081aaf07",
        "name": "",
        "func": "msg.payload = \"subscription was set to:\" + msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 840,
        "wires": [
            [
                "beb57fedcf3b6a8e"
            ]
        ]
    },
    {
        "id": "beb57fedcf3b6a8e",
        "type": "switch",
        "z": "a0bc3d9c081aaf07",
        "name": "",
        "property": "res",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1230,
        "y": 840,
        "wires": [
            [
                "2dc18d445ec06946"
            ],
            [
                "58a53251b5c84056",
                "2dc18d445ec06946"
            ]
        ]
    },
    {
        "id": "12484ca2a9e57071",
        "type": "tcp out",
        "z": "a0bc3d9c081aaf07",
        "d": true,
        "host": "127.0.0.1",
        "port": "1999",
        "beserver": "client",
        "base64": false,
        "end": true,
        "name": "Send to Datalake",
        "x": 1230,
        "y": 460,
        "wires": []
    },
    {
        "id": "7ef1ce67e8256384",
        "type": "inject",
        "z": "a0bc3d9c081aaf07",
        "name": "start printer state test requests",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "url",
                "v": "127.0.0.1:1880/api/",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payloadType": "date",
        "x": 170,
        "y": 480,
        "wires": [
            [
                "d4e74fe62845f0d8"
            ]
        ]
    },
    {
        "id": "b91c7850336c1606",
        "type": "comment",
        "z": "a0bc3d9c081aaf07",
        "name": "start REST API requests",
        "info": "",
        "x": 230,
        "y": 300,
        "wires": []
    },
    {
        "id": "8ecda61828f2f73e",
        "type": "json",
        "z": "a0bc3d9c081aaf07",
        "name": "convert to JSON",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1100,
        "y": 320,
        "wires": [
            [
                "2727d0735d7a392f"
            ]
        ]
    },
    {
        "id": "ad7172fea409e527",
        "type": "function",
        "z": "a0bc3d9c081aaf07",
        "name": "retrieve files",
        "func": "msg.url = msg.url + \"files\";\nmsg.topic = \"files\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 320,
        "wires": [
            [
                "9ae68ef6a2448576"
            ]
        ]
    },
    {
        "id": "a9658af5a9c3d912",
        "type": "http request",
        "z": "a0bc3d9c081aaf07",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 670,
        "y": 420,
        "wires": [
            [
                "3b9841ea9a945abc"
            ]
        ]
    },
    {
        "id": "43c2eb2317f882d0",
        "type": "inject",
        "z": "7c5f916b2c20b0c5",
        "name": "start setup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "5a83442542003c7d"
            ]
        ]
    },
    {
        "id": "e134e7ccc131ac2b",
        "type": "debug",
        "z": "7c5f916b2c20b0c5",
        "name": "STD OUT",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 160,
        "wires": []
    },
    {
        "id": "5a83442542003c7d",
        "type": "function",
        "z": "7c5f916b2c20b0c5",
        "name": "initiate variables",
        "func": "msg.AAS={\n    header:{info: \"\"},\n    body: {\n        Dataelements: [],\n        Collections_of_data_Elements:[],\n        Views:[],\n        standardServices:{\n        },\n        References:[]\n    }\n}\nflow.set(\"AAS\", msg.AAS)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 160,
        "wires": [
            [
                "e134e7ccc131ac2b"
            ]
        ]
    },
    {
        "id": "4047156caf5c364d",
        "type": "http request",
        "z": "7c5f916b2c20b0c5",
        "name": "send request",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 570,
        "y": 280,
        "wires": [
            [
                "e134e7ccc131ac2b"
            ]
        ]
    },
    {
        "id": "2c0a908ba81bb605",
        "type": "inject",
        "z": "7c5f916b2c20b0c5",
        "name": "subscribe",
        "props": [
            {
                "p": "url",
                "v": "/AAS/subscribeAll",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 240,
        "wires": [
            [
                "19423989b330107d"
            ]
        ]
    },
    {
        "id": "018876a946240fef",
        "type": "inject",
        "z": "7c5f916b2c20b0c5",
        "name": "unsubscribe",
        "props": [
            {
                "p": "url",
                "v": "/AAS/unsubscribeAll",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "19423989b330107d"
            ]
        ]
    },
    {
        "id": "cad197199c9efae2",
        "type": "http request",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "127.0.0.1:1880/AAS",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 470,
        "y": 380,
        "wires": [
            [
                "e134e7ccc131ac2b"
            ]
        ]
    },
    {
        "id": "53d9e84527c70314",
        "type": "inject",
        "z": "7c5f916b2c20b0c5",
        "name": "get general printer AAS info",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 160,
        "y": 380,
        "wires": [
            [
                "cad197199c9efae2"
            ]
        ]
    },
    {
        "id": "19423989b330107d",
        "type": "function",
        "z": "7c5f916b2c20b0c5",
        "name": "set url and payload",
        "func": "msg.url = \"127.0.0.1:1880\" + msg.url\nmsg.payload = {\"bucketAddress\": \"574b8f932f92\", \"bucketPort\": 9000}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 280,
        "wires": [
            [
                "4047156caf5c364d"
            ]
        ]
    },
    {
        "id": "0bc5b86f0e285cf6",
        "type": "comment",
        "z": "7c5f916b2c20b0c5",
        "name": "setup Printer",
        "info": "",
        "x": 220,
        "y": 80,
        "wires": []
    },
    {
        "id": "c8efb3cf6ccae8b3",
        "type": "comment",
        "z": "7c5f916b2c20b0c5",
        "name": "human API",
        "info": "",
        "x": 100,
        "y": 640,
        "wires": []
    },
    {
        "id": "79de41901d6f87ba",
        "type": "http in",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "url": "/AAS/api/get",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 780,
        "wires": [
            [
                "3b8a4be16761452c"
            ]
        ]
    },
    {
        "id": "701d2768bf34f884",
        "type": "http response",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 730,
        "y": 780,
        "wires": []
    },
    {
        "id": "82b7751d4574a452",
        "type": "objects",
        "z": "7c5f916b2c20b0c5",
        "objects_name": "get",
        "host": "dca656d872d7df8d",
        "objects_operation": "getObject",
        "objects_bucket": "",
        "objects_object": "",
        "objects_offset": "",
        "objects_length": "",
        "objects_stream": "",
        "objects_size": "",
        "objects_metadata": "",
        "objects_sourceobject": "",
        "objects_conditions": "",
        "objects_objectslist": [],
        "objects_prefix": "",
        "objects_etag": "",
        "objects_datetime": "",
        "x": 570,
        "y": 780,
        "wires": [
            [
                "701d2768bf34f884"
            ],
            []
        ]
    },
    {
        "id": "0bf32ca50af06cab",
        "type": "function",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "func": "new_msg = [];\nnew_msg = { operation: \"putObject\",\n            stream: msg.payload.payload,\n            bucketName: \"bronze-zone\",\n            metaData: msg.payload.metaData\n};\nif(msg.payload.metaData.topic==\"camera\"){\n    new_msg.objectName = msg.payload.metaData.topic +\"/\" + msg.payload.metaData.time +\".jpg\";\n}else{\n    new_msg.objectName = msg.payload.metaData.topic +\"/\" + msg.payload.metaData.time +\".json\";\n}\nreturn new_msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 540,
        "wires": [
            [
                "60061d2b800a5726"
            ]
        ]
    },
    {
        "id": "b5b50ff102c21562",
        "type": "objects",
        "z": "7c5f916b2c20b0c5",
        "objects_name": "put",
        "host": "a2274fa9a4058cf2",
        "objects_operation": "putObject",
        "objects_bucket": "",
        "objects_object": "",
        "objects_offset": "",
        "objects_length": "",
        "objects_stream": "",
        "objects_size": "",
        "objects_metadata": "",
        "objects_sourceobject": "",
        "objects_conditions": "",
        "objects_objectslist": [],
        "objects_prefix": "",
        "objects_etag": "",
        "objects_datetime": "",
        "x": 810,
        "y": 540,
        "wires": [
            [
                "e134e7ccc131ac2b"
            ],
            [
                "e134e7ccc131ac2b"
            ]
        ]
    },
    {
        "id": "f8b4787f0587a736",
        "type": "tcp in",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "server": "server",
        "host": "",
        "port": "1999",
        "datamode": "single",
        "datatype": "utf8",
        "newline": "",
        "topic": "",
        "base64": false,
        "x": 160,
        "y": 540,
        "wires": [
            [
                "69f6a4dbbac864a2"
            ]
        ]
    },
    {
        "id": "69f6a4dbbac864a2",
        "type": "json",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 410,
        "y": 540,
        "wires": [
            [
                "0bf32ca50af06cab"
            ]
        ]
    },
    {
        "id": "046fd4105792dc45",
        "type": "http in",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "url": "/AAS/api/listObjects",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 700,
        "wires": [
            [
                "33b4eb3b472e1de0"
            ]
        ]
    },
    {
        "id": "03067d9d8e0cd244",
        "type": "http response",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 640,
        "y": 700,
        "wires": []
    },
    {
        "id": "33b4eb3b472e1de0",
        "type": "buckets",
        "z": "7c5f916b2c20b0c5",
        "buckets_name": "",
        "host": "dca656d872d7df8d",
        "buckets_operation": "listObjectsV2",
        "buckets_bucket": "",
        "buckets_region": "",
        "buckets_prefix": "",
        "buckets_recursive": false,
        "buckets_start_after": "",
        "x": 400,
        "y": 700,
        "wires": [
            [
                "03067d9d8e0cd244"
            ],
            []
        ]
    },
    {
        "id": "3b8a4be16761452c",
        "type": "change",
        "z": "7c5f916b2c20b0c5",
        "name": "set bucket and object name",
        "rules": [
            {
                "t": "set",
                "p": "bucketName",
                "pt": "msg",
                "to": "payload.bucketName",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "objectName",
                "pt": "msg",
                "to": "payload.objectName",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 780,
        "wires": [
            [
                "82b7751d4574a452"
            ]
        ]
    },
    {
        "id": "482e54867212c957",
        "type": "http in",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "url": "/AAS/api/products",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 880,
        "wires": [
            [
                "aaaffb23a38a9ba2"
            ]
        ]
    },
    {
        "id": "de3803d5544154f8",
        "type": "http response",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/zip",
            "Content-Disposition": "attachment; filename=product.zip"
        },
        "x": 1120,
        "y": 880,
        "wires": []
    },
    {
        "id": "aaaffb23a38a9ba2",
        "type": "function",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "func": "/* check for those 3 cases:\n    all -> download all elements\n    folder -> downlaod complete folder\n    object -> downlaod file\n\n    the First to cases need a recursive download later and send to output 1\n    the third case is send to output 2 because it is a single object\n*/   \nif(msg.payload.element == \"all\"){\n    msg.prefix = msg.payload.id + \"/\";\n    return[msg, null];\n}else if(msg.payload.element.slice(-1) == \"/\"){\n    msg.prefix = msg.payload.element;\n    return[msg, null];\n}else{\n    msg.objectName = msg.payload.element;\n    return[null, msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 880,
        "wires": [
            [
                "37de4824ce1046f4"
            ],
            [
                "20a7ac9d489b4c07"
            ]
        ]
    },
    {
        "id": "154f8c4bc75402a4",
        "type": "function",
        "z": "7c5f916b2c20b0c5",
        "name": "combine data per product",
        "func": "let index;\n\n//get the index\nfor(i=0 ; i < msg.objectList.length ; i++){\n    if(msg.objectName === msg.objectList[i].name){\n        index = i;\n        break;\n    }\n}\nmsg.index = index;\n\nif(index === 0){\n    context.set(\"productList\", []);\n}else if(context.get(\"productList\") === undefined){\n    context.set(\"productList\", []);\n}\n\nraw_object = msg.objectList[index];\nmsg.name = raw_object.name;\nmsg.payload = msg.payload.objectData;\n\nproductList = context.get(\"productList\");\n\nproductList.push({\n                    payload: msg.payload,\n                    filename:   msg.name,\n                });\n                        \ncontext.set(\"productList\", productList);\n\nif(productList.length === msg.objectList.length){\n    msg.payload = productList;\n    context.set(\"productList\", []);\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 860,
        "wires": [
            [
                "6cd826966fb923ac"
            ]
        ]
    },
    {
        "id": "6cd826966fb923ac",
        "type": "zip",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "mode": "compress",
        "filename": "",
        "compressionlevel": 6,
        "outasstring": false,
        "x": 980,
        "y": 880,
        "wires": [
            [
                "de3803d5544154f8"
            ]
        ]
    },
    {
        "id": "37de4824ce1046f4",
        "type": "subflow:48bb845c784563a6",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "env": [
            {
                "name": "bucketName",
                "value": "gold-zone",
                "type": "str"
            },
            {
                "name": "recursive",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 520,
        "y": 860,
        "wires": [
            [
                "154f8c4bc75402a4"
            ]
        ]
    },
    {
        "id": "00d540db20232d2a",
        "type": "http in",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "url": "/AAS/api/time",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 980,
        "wires": [
            [
                "1717b14a0b19b90a",
                "7b903af7569f35ce"
            ]
        ]
    },
    {
        "id": "0336bf1cf23032b5",
        "type": "subflow:48bb845c784563a6",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "env": [
            {
                "name": "bucketName",
                "value": "time-zone",
                "type": "str"
            },
            {
                "name": "recursive",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 520,
        "y": 1120,
        "wires": [
            [
                "4432772318862b85"
            ]
        ]
    },
    {
        "id": "40d4cbad56647b4c",
        "type": "objects",
        "z": "7c5f916b2c20b0c5",
        "objects_name": "",
        "host": "a2274fa9a4058cf2",
        "objects_operation": "getObject",
        "objects_bucket": "time-zone",
        "objects_object": "",
        "objects_offset": "",
        "objects_length": "",
        "objects_stream": "",
        "objects_size": "",
        "objects_metadata": "",
        "objects_sourceobject": "",
        "objects_conditions": "",
        "objects_objectslist": [],
        "objects_prefix": "",
        "objects_etag": "",
        "objects_datetime": "",
        "x": 470,
        "y": 980,
        "wires": [
            [
                "96232cea81bfdb14"
            ],
            []
        ]
    },
    {
        "id": "70a32f5e03866358",
        "type": "csv",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1330,
        "y": 980,
        "wires": [
            [
                "3dc0546ff8781a73"
            ]
        ]
    },
    {
        "id": "c06489ee3d150289",
        "type": "csv",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\r\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1610,
        "y": 980,
        "wires": [
            [
                "979d3da7760b89a1"
            ]
        ]
    },
    {
        "id": "3dc0546ff8781a73",
        "type": "function",
        "z": "7c5f916b2c20b0c5",
        "name": "get TIme part",
        "func": "csvPart = [];\nstartIndex = undefined;\nendIndex = undefined;\nfor (let i = 0; i < msg.payload.length; i++) {\n    if(msg.payload[i].timestamp > msg.startTime){\n        if(msg.payload[i-1].timestamp <= msg.startTime){\n            csvPart.push(msg.payload[i-1]);\n        }\n        csvPart.push(msg.payload[i]);\n        if(msg.payload[i].timestamp >= msg.endTime){\n            break;\n        }\n    }\n}\nmsg.payload = csvPart;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 980,
        "wires": [
            [
                "c06489ee3d150289"
            ]
        ]
    },
    {
        "id": "7b903af7569f35ce",
        "type": "function",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "func": "msg.objectName = \"dynamic/\" + msg.payload.name + \".csv\";\nmsg.startTime = msg.payload.startTime;\nmsg.endTime = msg.payload.endTime;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 980,
        "wires": [
            [
                "40d4cbad56647b4c"
            ]
        ]
    },
    {
        "id": "1717b14a0b19b90a",
        "type": "function",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "func": "msg.prefix = \"static/\" + msg.payload.name +\"/\";\nmsg.startTime = msg.payload.startTime;\nmsg.endTime = msg.payload.endTime;\nmsg.name = msg.payload.name;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1120,
        "wires": [
            [
                "0336bf1cf23032b5"
            ]
        ]
    },
    {
        "id": "6862edd7af6f21ff",
        "type": "change",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.objectData",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 980,
        "wires": [
            [
                "90eba81444616318"
            ]
        ]
    },
    {
        "id": "96232cea81bfdb14",
        "type": "switch",
        "z": "7c5f916b2c20b0c5",
        "name": "if getObject is true",
        "property": "payload.getObject",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 690,
        "y": 980,
        "wires": [
            [
                "6862edd7af6f21ff"
            ]
        ]
    },
    {
        "id": "979d3da7760b89a1",
        "type": "http response",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "statusCode": "200",
        "headers": {
            "Content-Type": "text/csv",
            "Content-Disposition": "attachment; filename=variable.csv"
        },
        "x": 1780,
        "y": 980,
        "wires": []
    },
    {
        "id": "90eba81444616318",
        "type": "function",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "func": "msg.payload = msg.payload.toString();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 980,
        "wires": [
            [
                "70a32f5e03866358"
            ]
        ]
    },
    {
        "id": "633d4bb9a5890302",
        "type": "function",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "func": "part = [];\nfor(var object of msg.payload){\n    time = object.metaData[\"X-Amz-Meta-Time\"];\n    if (time >= msg.startTime && time <= msg.endTime){\n        part.push(object);\n    }\n}\nmsg.payload = part;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1120,
        "wires": [
            [
                "50cf0dd05049c828"
            ]
        ]
    },
    {
        "id": "50cf0dd05049c828",
        "type": "zip",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "mode": "compress",
        "filename": "",
        "compressionlevel": 6,
        "outasstring": false,
        "x": 1180,
        "y": 1120,
        "wires": [
            [
                "26dc4a27bbcb5251"
            ]
        ]
    },
    {
        "id": "26dc4a27bbcb5251",
        "type": "http response",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/zip",
            "Content-Disposition": "attachment; filename=product.zip"
        },
        "x": 1780,
        "y": 1120,
        "wires": []
    },
    {
        "id": "4432772318862b85",
        "type": "function",
        "z": "7c5f916b2c20b0c5",
        "name": "combine data per product",
        "func": "let index;\n\n//get the index\nfor(i=0 ; i < msg.objectList.length ; i++){\n    if(msg.objectName === msg.objectList[i].name){\n        index = i;\n        break;\n    }\n}\nmsg.index = index;\n\nif(index === 0){\n    context.set(\"productList\", []);\n}else if(context.get(\"productList\") === undefined){\n    context.set(\"productList\", []);\n}\n\nraw_object = msg.objectList[index];\nmsg.name = raw_object.name;\nmsg.payload = msg.payload.objectData;\n\nproductList = context.get(\"productList\");\n\nproductList.push({\n                    payload: msg.payload,\n                    filename:   msg.name,\n                    metaData: msg.metaData\n                });\n                        \ncontext.set(\"productList\", productList);\n\nnode.status({fill:\"yellow\",shape:\"dot\",text:\"found \"+ productList.length +\"/\"+ msg.objectList.length+ \"objects\"});\n\nif(productList.length === msg.objectList.length){\n    node.status({fill:\"green\",shape:\"dot\",text:\"found all \"+ productList.length +\"/\"+ msg.objectList.length+ \"objects\"});\n    msg.payload = productList;\n    context.set(\"productList\", []);\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"productList\", []);",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1120,
        "wires": [
            [
                "633d4bb9a5890302"
            ]
        ]
    },
    {
        "id": "157384d046b862ee",
        "type": "http in",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "url": "/AAS/api/products/var",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1240,
        "wires": [
            [
                "e632a3a93935c4b5"
            ]
        ]
    },
    {
        "id": "60061d2b800a5726",
        "type": "delay",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 740,
        "y": 620,
        "wires": [
            [
                "b5b50ff102c21562"
            ]
        ]
    },
    {
        "id": "20a7ac9d489b4c07",
        "type": "objects",
        "z": "7c5f916b2c20b0c5",
        "objects_name": "get",
        "host": "a2274fa9a4058cf2",
        "objects_operation": "getObject",
        "objects_bucket": "gold-zone",
        "objects_object": "",
        "objects_offset": "",
        "objects_length": "",
        "objects_stream": "",
        "objects_size": "",
        "objects_metadata": "",
        "objects_sourceobject": "",
        "objects_conditions": "",
        "objects_objectslist": [],
        "objects_prefix": "",
        "objects_etag": "",
        "objects_datetime": "",
        "x": 470,
        "y": 900,
        "wires": [
            [
                "e37c28a6a0d1e321"
            ],
            []
        ]
    },
    {
        "id": "e37c28a6a0d1e321",
        "type": "function",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "func": "msg.fileName = msg.objectName;\nmsg.payload = msg.payload.objectData;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 900,
        "wires": [
            [
                "6cd826966fb923ac"
            ]
        ]
    },
    {
        "id": "794dcf1bb9ea0ed6",
        "type": "http in",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "url": "/AAS/api/charges/var",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1340,
        "wires": [
            [
                "91c9196d323a8934"
            ]
        ]
    },
    {
        "id": "91c9196d323a8934",
        "type": "subflow:ab1e0d4b6570960a",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "env": [
            {
                "name": "bucketName",
                "value": "diamond-zone",
                "type": "str"
            }
        ],
        "x": 430,
        "y": 1340,
        "wires": []
    },
    {
        "id": "e632a3a93935c4b5",
        "type": "subflow:ab1e0d4b6570960a",
        "z": "7c5f916b2c20b0c5",
        "name": "",
        "env": [
            {
                "name": "bucketName",
                "value": "gold-zone",
                "type": "str"
            }
        ],
        "x": 420,
        "y": 1240,
        "wires": []
    },
    {
        "id": "1e118f6b31eb14ed",
        "type": "comment",
        "z": "28344a0f0587eb28",
        "name": "create Productstructure in silver",
        "info": "",
        "x": 150,
        "y": 40,
        "wires": []
    },
    {
        "id": "28c08b80c01057fd",
        "type": "inject",
        "z": "28344a0f0587eb28",
        "name": "start populating silver",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 140,
        "y": 400,
        "wires": [
            [
                "4fb43911b7f11d98"
            ]
        ]
    },
    {
        "id": "47562eb3615a34c7",
        "type": "comment",
        "z": "28344a0f0587eb28",
        "name": "order Productvise into silver zone ",
        "info": "devide product wise and also devide between dynamic and static values",
        "x": 150,
        "y": 320,
        "wires": []
    },
    {
        "id": "a1908cfe55b8a696",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "set printerstate put parameters",
        "func": "timestamp = msg.metaData[\"X-Amz-Meta-Time\"]\nproductList = msg.productList\nvar id = \"idle\"\n//TODO: maybe start searching by last checked productid\n//get Product id by timestamp\nmsg.test = []\nfor(i = 0; i<productList.length; i++){\n    msg.test.push(i)\n    if (timestamp>=productList[i].startTime){\n        //if time is after starttime and \n        //product has no endtime yet it must belong to the newest product\n        if(i == productList.length-1){\n            id = productList[i].id\n            msg.test.push(true)\n            break\n        }else{\n            //else if time is between start and endtime it musst also be this product\n            if(timestamp < productList[i+1].startTime){\n                id = productList[i].id\n                msg.test.push(true)\n                break\n            }\n        }\n    }\n}\n\nmsg.bucketName = \"silver-zone\"\nmsg.objectName = id +\"/dynamic/printerState/\" + timestamp + \".json\"\nmsg.metaData[\"X-AMZ-Meta-Productid\"] = id\nmsg.stream = msg.payload.objectData\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 400,
        "wires": [
            [
                "5849ea010a39f548"
            ]
        ]
    },
    {
        "id": "79ce337b829b1913",
        "type": "objects",
        "z": "28344a0f0587eb28",
        "objects_name": "put objects into silver",
        "host": "a2274fa9a4058cf2",
        "objects_operation": "putObject",
        "objects_bucket": "silver-zone",
        "objects_object": "",
        "objects_offset": "",
        "objects_length": "",
        "objects_stream": "",
        "objects_size": "",
        "objects_metadata": "",
        "objects_sourceobject": "",
        "objects_conditions": "",
        "objects_objectslist": [],
        "objects_prefix": "",
        "objects_etag": "",
        "objects_datetime": "",
        "x": 1520,
        "y": 400,
        "wires": [
            [
                "910a38be6135c21b"
            ],
            [
                "20791736f2fb9690"
            ]
        ]
    },
    {
        "id": "49d651ec0b71b028",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "set camera put parameters",
        "func": "timestamp = msg.metaData[\"X-Amz-Meta-Time\"]\nproductList = msg.productList\nvar id = \"idle\"\n//TODO: maybe start searching by last checked productid\n//get Product id by timestamp\nmsg.test = []\nfor(let i = 0; i<productList.length; i++){\n    msg.test.push(i)\n    if (timestamp>=productList[i].startTime){\n        //if time is after starttime and \n        //product has no endtime yet it must belong to the newest product\n        if(i == productList.length-1){\n            id = productList[i].id\n            msg.test.push(true)\n            break\n        }else{\n            //else if time is between start and endtime it musst also be this product\n            if(timestamp<productList[i+1].startTime){\n                id = productList[i].id\n                msg.test.push(true)\n                break\n            }\n        }\n    }\n}\n\nmsg.bucketName = \"silver-zone\"\nmsg.objectName = id +\"/static/camera/\" + timestamp + \".json\"\nmsg.metaData[\"X-AMZ-Meta-Productid\"] = id\nmsg.stream = msg.payload.objectData\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 440,
        "wires": [
            [
                "5849ea010a39f548"
            ]
        ]
    },
    {
        "id": "fc39446d68e3fd7c",
        "type": "debug",
        "z": "28344a0f0587eb28",
        "name": "transformation error out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3370,
        "y": 420,
        "wires": []
    },
    {
        "id": "f4e9450ec331fedd",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "create list of product starttimes",
        "func": "//if msg comes from get object node then set productlist\nif(msg.payload.getObject == true){\n    productList = flow.get(\"productList\");\n    objectData = JSON.parse(msg.payload.objectData);\n    productList.push({\n                        id: objectData.id,\n                        startTime: objectData.startTime\n                    });\n    flow.set(\"productList\", productList);\n}\n\nif(productList.length == msg.objectList.length-1){\n    //before sending the productlist we sort it by id\n    //this way we can easier check which product an timestamp was:\n    //      we now check if it is bigger or equal than product i starttime\n    //      and smaller than product i+1 start time\n    productList = flow.get(\"productList\")\n    productList.sort(function(a, b){\n                                        if(a.prefix == \"idle/)\"){\n                                            return 1;\n                                        }else if (b.prefix == \"idle/\"){\n                                            return -1;\n                                        }else{\n                                            return a.id - b.id;\n                                        }\n                                    });\n    flow.set(\"productList\", productList)                                \n    msg.productList = productList;\n    \n    node.status({fill:\"green\",shape:\"dot\",text:\"found \" + productList.length + \"/\"+ (msg.objectList.length-1) + \"products\"});\n    \n    return msg;\n}else{\n    node.status({fill:\"yellow\",shape:\"dot\",text:\"found \" + productList.length + \"/\"+ (msg.objectList.length-1) + \"products\"});\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Der Code hier wird ausgeführt,\n// wenn der Node gestartet wird\nflow.set(\"productCounter\", 0);\nflow.set(\"productList\", []);",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 400,
        "wires": [
            [
                "50013a7ebece628a",
                "1f1daee527cefdba"
            ]
        ]
    },
    {
        "id": "910a38be6135c21b",
        "type": "debug",
        "z": "28344a0f0587eb28",
        "name": "transformation standard out",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3400,
        "y": 40,
        "wires": []
    },
    {
        "id": "20791736f2fb9690",
        "type": "switch",
        "z": "28344a0f0587eb28",
        "name": "if not null",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1700,
        "y": 420,
        "wires": [
            [
                "fc39446d68e3fd7c"
            ]
        ]
    },
    {
        "id": "bdee338487612302",
        "type": "inject",
        "z": "28344a0f0587eb28",
        "name": "start product-organisation",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "8ccf429ceab86cf6"
            ]
        ]
    },
    {
        "id": "9ef7e8972365f6af",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "set put parameters for jobState",
        "func": "//set as last checked file name\n//sart the next list after this file\nflow.set(\"lastCheckedJobState\", msg.name)\n\n//set put parameters\nmsg.bucketName = \"silver-zone\"\nmsg.objectName = msg.metaData[\"X-Amz-Meta-Productid\"] + \"/dynamic/\" + msg.objectName\nmsg.stream = JSON.stringify(msg.payload.objectData);\n\n//set metadata tags\n//msg.metaData.time = msg.payload.time\n//msg.metaData.productid = msg.payload.productid\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 60,
        "wires": [
            [
                "3c1150bd27f8f03a"
            ]
        ]
    },
    {
        "id": "3c1150bd27f8f03a",
        "type": "objects",
        "z": "28344a0f0587eb28",
        "objects_name": "put objects",
        "host": "a2274fa9a4058cf2",
        "objects_operation": "putObject",
        "objects_bucket": "silver-Zone",
        "objects_object": "",
        "objects_offset": "",
        "objects_length": "",
        "objects_stream": "",
        "objects_size": "",
        "objects_metadata": "",
        "objects_sourceobject": "",
        "objects_conditions": "",
        "objects_objectslist": [],
        "objects_prefix": "",
        "objects_etag": "",
        "objects_datetime": "",
        "x": 1450,
        "y": 80,
        "wires": [
            [
                "910a38be6135c21b"
            ],
            [
                "f43288b84ec0e5a4"
            ]
        ]
    },
    {
        "id": "e5545a42d66b8ddb",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "get start and end time of every product",
        "func": "function createProduct(msg){\n    product = {}\n    product.startTime = msg.metaData[\"X-Amz-Meta-Time\"]\n    product.id = msg.metaData[\"X-Amz-Meta-Productid\"]\n    product.file = msg.payload.objectData.job.file\n    product.estimatedPrintTime = msg.payload.objectData.job.estimatedPrintTime\n    product.filament = msg.payload.objectData.job.filament\n    return product;\n}\n\nproduct = flow.get(\"product\")\nmsg.payload.objectData = JSON.parse(msg.payload.objectData)\nproductMsg = undefined\n\n//check if its still the same product or the next one\n//if its the first product create a new one\nif (product === undefined){\n    product = createProduct(msg)\n//if its the same product just adjust the endtime\n}else if ( msg.metaData[\"X-Amz-Meta-Productid\"]== product.id){\n    product.endTime = msg.metaData[\"X-Amz-Meta-Time\"]\n//if its a new product\n}else{\n    //prepare static info msg \"productMsg\" for old product\n    productMsg = {payload: product};\n    \n    //create new product\n    createProduct(msg)\n}\n\n//safe current product object\nflow.set(\"product\", product)\n\n//remove static info from jobstate\n//progress = msg.payload.objectData.job.progress;\n//state = msg.payload.objectData.job.progress;\nmsg.payload =   {  \n                    objectData: {\n                            job: {\n                                progress: msg.payload.objectData.progress,\n                                state: msg.payload.objectData.state\n                            }\n                    }\n                }\n                \n//return jobinfo\nif(productMsg === undefined){\n    return [msg, null]\n//or if the next Product started jobinfo and the static info msg\n}else{\n    node.status({fill:\"green\",shape:\"dot\",text:\"product \" + productMsg.payload.id});\n    return [msg, productMsg];    \n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 80,
        "wires": [
            [
                "9ef7e8972365f6af"
            ],
            [
                "7ad34becfb11478d"
            ]
        ]
    },
    {
        "id": "7ad34becfb11478d",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "set put parameters for product",
        "func": "//set put parameters\nmsg.bucketName = \"silver-zone\"\nmsg.objectName = msg.payload.id + \"/static/staticInfo.json\"\nmsg.stream = JSON.stringify(msg.payload)\nmsg.metaData = msg.metadata\n\n//set metadata tags\n//msg.metaData.time = msg.payload.time\n//msg.metaData.productid = msg.payload.productid\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 100,
        "wires": [
            [
                "3c1150bd27f8f03a"
            ]
        ]
    },
    {
        "id": "f43288b84ec0e5a4",
        "type": "switch",
        "z": "28344a0f0587eb28",
        "name": "if not null",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1620,
        "y": 120,
        "wires": [
            [
                "fc39446d68e3fd7c"
            ]
        ]
    },
    {
        "id": "8ccf429ceab86cf6",
        "type": "subflow:48bb845c784563a6",
        "z": "28344a0f0587eb28",
        "name": "",
        "env": [
            {
                "name": "bucketName",
                "value": "bronze-zone",
                "type": "str"
            },
            {
                "name": "prefix (optional)",
                "value": "jobState/",
                "type": "str"
            }
        ],
        "x": 410,
        "y": 80,
        "wires": [
            [
                "3826d4b1ed1c5b15"
            ]
        ]
    },
    {
        "id": "4fb43911b7f11d98",
        "type": "subflow:48bb845c784563a6",
        "z": "28344a0f0587eb28",
        "name": "get Products",
        "env": [
            {
                "name": "bucketName",
                "value": "silver-zone",
                "type": "str"
            },
            {
                "name": "sufix (optional)",
                "value": "static/staticInfo.json",
                "type": "str"
            }
        ],
        "x": 350,
        "y": 400,
        "wires": [
            [
                "f4e9450ec331fedd"
            ]
        ]
    },
    {
        "id": "50013a7ebece628a",
        "type": "subflow:48bb845c784563a6",
        "z": "28344a0f0587eb28",
        "name": "get printerstates",
        "env": [
            {
                "name": "bucketName",
                "value": "bronze-zone",
                "type": "str"
            },
            {
                "name": "prefix (optional)",
                "value": "printerState/",
                "type": "str"
            }
        ],
        "x": 820,
        "y": 400,
        "wires": [
            [
                "a1908cfe55b8a696"
            ]
        ]
    },
    {
        "id": "1f1daee527cefdba",
        "type": "subflow:48bb845c784563a6",
        "z": "28344a0f0587eb28",
        "name": "get camera frames",
        "env": [
            {
                "name": "bucketName",
                "value": "bronze-zone",
                "type": "str"
            },
            {
                "name": "prefix (optional)",
                "value": "camera/",
                "type": "str"
            }
        ],
        "x": 830,
        "y": 440,
        "wires": [
            [
                "49d651ec0b71b028"
            ]
        ]
    },
    {
        "id": "f0391a081687ef44",
        "type": "comment",
        "z": "28344a0f0587eb28",
        "name": "populate gold",
        "info": "",
        "x": 110,
        "y": 800,
        "wires": []
    },
    {
        "id": "1de2231a885f57be",
        "type": "inject",
        "z": "28344a0f0587eb28",
        "name": "start populating gold",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 840,
        "wires": [
            [
                "e077e2489d4f76cb"
            ]
        ]
    },
    {
        "id": "3ccf98075c98090d",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "set put parameters",
        "func": "msg.objectName = msg.metaData[\"X-Amz-Meta-Productid\"] +\"/dynamicValues.csv\";\nmsg.stream = msg.csv;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2570,
        "y": 740,
        "wires": [
            [
                "f0cc89842c500891"
            ]
        ]
    },
    {
        "id": "f0cc89842c500891",
        "type": "objects",
        "z": "28344a0f0587eb28",
        "objects_name": "",
        "host": "a2274fa9a4058cf2",
        "objects_operation": "putObject",
        "objects_bucket": "gold-zone",
        "objects_object": "",
        "objects_offset": "",
        "objects_length": "",
        "objects_stream": "",
        "objects_size": "",
        "objects_metadata": "",
        "objects_sourceobject": "",
        "objects_conditions": "",
        "objects_objectslist": [],
        "objects_prefix": "",
        "objects_etag": "",
        "objects_datetime": "",
        "x": 2790,
        "y": 800,
        "wires": [
            [
                "910a38be6135c21b"
            ],
            [
                "bec9604177b95378"
            ]
        ]
    },
    {
        "id": "eb8a4070f0215e55",
        "type": "buckets",
        "z": "28344a0f0587eb28",
        "buckets_name": "list objects",
        "host": "a2274fa9a4058cf2",
        "buckets_operation": "listObjectsV2WithMetadata",
        "buckets_bucket": "silver-zone",
        "buckets_region": "",
        "buckets_prefix": "",
        "buckets_recursive": false,
        "buckets_start_after": "",
        "x": 610,
        "y": 840,
        "wires": [
            [
                "3bb9d97a767b87ea"
            ],
            []
        ]
    },
    {
        "id": "e077e2489d4f76cb",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "start after last checked Object",
        "func": "lastCheckedProduct = flow.get(\"lastCheckedProduct\")\nif ( (lastCheckedProduct !== undefined)){\n    //msg.startAfter = lastCheckedObject\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 840,
        "wires": [
            [
                "eb8a4070f0215e55"
            ]
        ]
    },
    {
        "id": "3803659243f09f5f",
        "type": "split",
        "z": "28344a0f0587eb28",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 950,
        "y": 840,
        "wires": [
            [
                "b922ccb2cff73e93",
                "9a6243e5c4920b7f"
            ]
        ]
    },
    {
        "id": "a3e1b9838e84b121",
        "type": "comment",
        "z": "28344a0f0587eb28",
        "name": "TODO: Ohne begrenzung/verzögerung",
        "info": "",
        "x": 850,
        "y": 780,
        "wires": []
    },
    {
        "id": "bec9604177b95378",
        "type": "switch",
        "z": "28344a0f0587eb28",
        "name": "if not null",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2960,
        "y": 800,
        "wires": [
            [
                "fc39446d68e3fd7c"
            ]
        ]
    },
    {
        "id": "573b5b43eb2e5e91",
        "type": "subflow:48bb845c784563a6",
        "z": "28344a0f0587eb28",
        "name": "",
        "env": [
            {
                "name": "bucketName",
                "value": "silver-zone",
                "type": "str"
            },
            {
                "name": "recursive",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 1510,
        "y": 740,
        "wires": [
            [
                "9cea75875ef21045"
            ]
        ]
    },
    {
        "id": "b922ccb2cff73e93",
        "type": "delay",
        "z": "28344a0f0587eb28",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1110,
        "y": 740,
        "wires": [
            [
                "985878720c470607"
            ]
        ]
    },
    {
        "id": "0d520a3adf937ec8",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "split by column",
        "func": "msg.payload = {};\nproductList = msg.productList;\ntimestamps = [];\ncompleteProductInfo = {};\nfor (let object of productList){\n    for (var valueKey in object.data){\n        if(msg.payload[valueKey] === undefined){\n            msg.payload[valueKey] = [];\n        }\n        timestamp = object.metaData[\"X-Amz-Meta-Time\"];\n        //only add timestamp if it is not in it already\n        //otherwise every element is multiple times in csv\n        if(timestamps.indexOf(timestamp) === -1){\n            timestamps.push(timestamp);\n        }\n        if(completeProductInfo[valueKey] === undefined){\n                completeProductInfo[valueKey] = [];\n        }\n        completeProductInfo[valueKey].push({timestamp: timestamp, value: object.data[valueKey]});\n    }\n}\n\nmsg.timestamps = timestamps\nmsg.completeProductInfo = completeProductInfo;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2120,
        "y": 740,
        "wires": [
            [
                "efe9b58d79dbaa80"
            ]
        ]
    },
    {
        "id": "3bb9d97a767b87ea",
        "type": "change",
        "z": "28344a0f0587eb28",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.listObjectsV2WithMetadata",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 840,
        "wires": [
            [
                "3803659243f09f5f"
            ]
        ]
    },
    {
        "id": "985878720c470607",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "",
        "func": "//msg.prefix = \"2/dynamic/jobState/\"\nmsg.prefix = msg.payload.prefix +\"dynamic/\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 740,
        "wires": [
            [
                "573b5b43eb2e5e91"
            ]
        ]
    },
    {
        "id": "ddb081870eb626ad",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "get all Values",
        "func": "function getAllObjectValues(object){\n        for(var k in object) { \n            if(object[k] && typeof object[k] === 'object' && object[k].constructor === Object){\n                getAllObjectValues(object[k]);\n            }else{\n                result.data[k] = object[k];\n            }\n        }\n}\n\n//if msg comes from get object node then set productlist\nif(msg.payload.getObject === true){\n    productList = context.get(\"productList\");\n    objectData = JSON.parse(msg.payload.objectData);\n    result = {};\n    result.data ={};\n    if(objectData && typeof objectData === 'object' && objectData.constructor === Object){\n        getAllObjectValues(objectData);\n    }else{\n        result.data[\"test\"] = objectData;\n    }\n    result.metaData = msg.metaData;\n    productList.push(result);\n    context.set(\"productList\", productList);\n}else{\n    node.error(\"getobject was false\")\n}\n\nproductList = context.get(\"productList\");\nif(productList!==undefined){\n    if(productList.length === msg.objectList.length){\n        msg.productList = productList;\n        context.set(\"productList\", []);\n        context.set(\"counter\", context.get(\"counter\")+1);\n        node.status({fill:\"green\",shape:\"dot\",text:\"got variables of\"+ context.get(\"counter\") +\"products\"});\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Der Code hier wird ausgeführt,\n// wenn der Node gestartet wird\ncontext.set(\"productList\", []);\ncontext.set(\"counter\", 0);",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 740,
        "wires": [
            [
                "0d520a3adf937ec8"
            ]
        ]
    },
    {
        "id": "efe9b58d79dbaa80",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "combine to 1 csv per Product",
        "func": "//create ColumnMapping and header Line\nlet columnMap = {};\n//start at 2 because timestamp at 0 and normalizedTimestamp at 1\ncounter = 2;\nheader = \"timestamp,normalizedTimestamp\";\nfor(let property in msg.completeProductInfo) {\n  columnMap[property] = counter;\n  header = header + \",\" + property;\n  counter = counter + 1;\n}\nnumColumns = counter;\n\ncsv = header + \"\\n\";\n//go through list of all occuring timesteps and add all availible info\ntimestamps = msg.timestamps.sort();\nfor(let timestamp of timestamps){\n    //initialize an array with the size = number of columnnums\n    line = Array.apply(null, Array(numColumns)).map(function () {});\n    //first column Timestamp\n    line[0] = timestamp;\n    //normalized Timestamp\n    line[1] = timestamp - timestamps[0]\n    for (let property in msg.completeProductInfo){\n        columnIndex = columnMap[property];\n        index = 0;\n        for(let value of msg.completeProductInfo[property]){\n            if(timestamp == value.timestamp){\n                line[columnIndex] = value.value;\n                //msg.completeProductInfo[property].splice(index, 1);\n                break;\n            }\n            index = index + 1;\n        }\n    }\n    \n    for(i=0; i<line.length; i++){\n        if(line[i] !== undefined){\n            csv = csv + line[i];\n        }\n        if(i !==line.length-1){\n            csv = csv + \",\";\n        }else{\n            csv = csv + \"\\n\";\n        }\n    }\n}\nmsg.csv = csv;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2340,
        "y": 740,
        "wires": [
            [
                "3ccf98075c98090d",
                "910a38be6135c21b"
            ]
        ]
    },
    {
        "id": "9cea75875ef21045",
        "type": "delay",
        "z": "28344a0f0587eb28",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "5",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1760,
        "y": 740,
        "wires": [
            [
                "ddb081870eb626ad"
            ]
        ]
    },
    {
        "id": "5849ea010a39f548",
        "type": "delay",
        "z": "28344a0f0587eb28",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "2",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1300,
        "y": 400,
        "wires": [
            [
                "79ce337b829b1913"
            ]
        ]
    },
    {
        "id": "3826d4b1ed1c5b15",
        "type": "delay",
        "z": "28344a0f0587eb28",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "5",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 660,
        "y": 80,
        "wires": [
            [
                "e5545a42d66b8ddb"
            ]
        ]
    },
    {
        "id": "9a6243e5c4920b7f",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "static values",
        "func": "id = msg.payload.prefix.split(\"/\")[0];\nmsg.prefix = id + \"/static/\"\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 900,
        "wires": [
            [
                "155f50a62c6b546e"
            ]
        ]
    },
    {
        "id": "117a9826b067953c",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "set put parameters",
        "func": "msg.stream = JSON.stringify(msg.payload);\n\n\n//Remove \"Static\" from the objectName\nnew_name = \"\"\n//add i=0 manual because it has no \"/\" at the start\nnameArray = msg.objectName.split(\"/\")\nnew_name = nameArray[0];\n//start at i = 2 to skip \"static\"\nfor(let i = 2; i<nameArray.length; i++){\n    new_name = new_name + \"/\" + nameArray[i];\n}\n\n\nmsg.objectName = new_name;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2550,
        "y": 900,
        "wires": [
            [
                "fa862d2e5f4ad221",
                "a3c5bcb1c586577c"
            ]
        ]
    },
    {
        "id": "155f50a62c6b546e",
        "type": "delay",
        "z": "28344a0f0587eb28",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "2",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1400,
        "y": 900,
        "wires": [
            [
                "72939f94f523ea05"
            ]
        ]
    },
    {
        "id": "9ad6378986f315c0",
        "type": "comment",
        "z": "28344a0f0587eb28",
        "name": "static values",
        "info": "",
        "x": 1190,
        "y": 860,
        "wires": []
    },
    {
        "id": "72939f94f523ea05",
        "type": "subflow:48bb845c784563a6",
        "z": "28344a0f0587eb28",
        "name": "",
        "env": [
            {
                "name": "bucketName",
                "value": "silver-zone",
                "type": "str"
            },
            {
                "name": "recursive",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 1650,
        "y": 900,
        "wires": [
            [
                "117a9826b067953c"
            ]
        ]
    },
    {
        "id": "338dfa900802ae2a",
        "type": "comment",
        "z": "28344a0f0587eb28",
        "name": "populate time-zone",
        "info": "",
        "x": 130,
        "y": 1020,
        "wires": []
    },
    {
        "id": "5cf830d3b4358da0",
        "type": "inject",
        "z": "28344a0f0587eb28",
        "name": "start populating gold",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 1080,
        "wires": [
            [
                "9d643bf45d62655e"
            ]
        ]
    },
    {
        "id": "c81879148aac27e1",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "set put parameters",
        "func": "msg.objectName = \"dynamic/\" + msg.payload.name + \".csv\";\nmsg.stream = msg.payload.csv;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2750,
        "y": 1060,
        "wires": [
            [
                "3c833658d4487c3b"
            ]
        ]
    },
    {
        "id": "3c833658d4487c3b",
        "type": "objects",
        "z": "28344a0f0587eb28",
        "objects_name": "",
        "host": "a2274fa9a4058cf2",
        "objects_operation": "putObject",
        "objects_bucket": "time-zone",
        "objects_object": "",
        "objects_offset": "",
        "objects_length": "",
        "objects_stream": "",
        "objects_size": "",
        "objects_metadata": "",
        "objects_sourceobject": "",
        "objects_conditions": "",
        "objects_objectslist": [],
        "objects_prefix": "",
        "objects_etag": "",
        "objects_datetime": "",
        "x": 2830,
        "y": 1120,
        "wires": [
            [
                "910a38be6135c21b"
            ],
            [
                "b3bbfea97dcca08b"
            ]
        ]
    },
    {
        "id": "9d643bf45d62655e",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "start after last checked Object",
        "func": "lastCheckedProduct = flow.get(\"lastCheckedProduct\")\nif ( (lastCheckedProduct !== undefined)){\n    //msg.startAfter = lastCheckedObject\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1100,
        "wires": [
            [
                "60ac0eb7865f8920",
                "7844f504d9fa2ba3",
                "518271985d5249cb"
            ]
        ]
    },
    {
        "id": "b3bbfea97dcca08b",
        "type": "switch",
        "z": "28344a0f0587eb28",
        "name": "if not null",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3000,
        "y": 1120,
        "wires": [
            [
                "fc39446d68e3fd7c"
            ]
        ]
    },
    {
        "id": "712ebe43d0514af8",
        "type": "subflow:48bb845c784563a6",
        "z": "28344a0f0587eb28",
        "name": "",
        "env": [
            {
                "name": "bucketName",
                "value": "bronze-zone",
                "type": "str"
            }
        ],
        "x": 1530,
        "y": 1060,
        "wires": [
            [
                "b66837e3a2c80a25"
            ]
        ]
    },
    {
        "id": "b43a4a1ba2efd486",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "split by column",
        "func": "msg.payload = {};\nproductList = msg.productList;\ntimestamps = [];\ncompleteProductInfo = {};\nfor (let object of productList){\n    for (var valueKey in object.data){\n        if(msg.payload[valueKey] === undefined){\n            msg.payload[valueKey] = [];\n        }\n        timestamp = object.metaData[\"X-Amz-Meta-Time\"];\n        //only add timestamp if it is not in it already\n        //otherwise every element is multiple times in csv\n        if(timestamps.indexOf(timestamp) === -1){\n            timestamps.push(timestamp);\n        }\n        if(completeProductInfo[valueKey] === undefined){\n                completeProductInfo[valueKey] = [];\n        }\n        completeProductInfo[valueKey].push({timestamp: timestamp, value: object.data[valueKey]});\n    }\n}\n\nmsg.timestamps = timestamps\nmsg.completeProductInfo = completeProductInfo;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2140,
        "y": 1060,
        "wires": [
            [
                "6a5a55516400d099"
            ]
        ]
    },
    {
        "id": "0f3b8bea66a303cb",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "get all Values",
        "func": "function getAllObjectValues(object){\n        for(var k in object) { \n            if(object[k] && typeof object[k] === 'object' && object[k].constructor === Object){\n                getAllObjectValues(object[k]);\n            }else{\n                result.data[k] = object[k];\n            }\n        }\n}\n\n//if msg comes from get object node then set productlist\nif(msg.payload.getObject === true){\n    productList = context.get(\"productList\");\n    objectData = JSON.parse(msg.payload.objectData);\n    result = {};\n    result.data ={};\n    if(objectData && typeof objectData === 'object' && objectData.constructor === Object){\n        getAllObjectValues(objectData);\n    }else{\n        result.data[\"test\"] = objectData;\n    }\n    result.metaData = msg.metaData;\n    productList.push(result);\n    context.set(\"productList\", productList);\n}else{\n    msg.error(\"getobject was false\")\n}\n\nproductList = context.get(\"productList\");\nif(productList!==undefined){\n    if(productList.length === msg.objectList.length){\n        msg.productList = productList;\n        context.set(\"productList\", []);\n        context.set(\"counter\", context.get(\"counter\")+1);\n        node.status({fill:\"green\",shape:\"dot\",text:\"got variables of \"+ context.get(\"counter\") +\" sources\"});\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Der Code hier wird ausgeführt,\n// wenn der Node gestartet wird\ncontext.set(\"productList\", []);\ncontext.set(\"counter\", 0);",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 1060,
        "wires": [
            [
                "b43a4a1ba2efd486"
            ]
        ]
    },
    {
        "id": "6a5a55516400d099",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "create 1 csv per Column",
        "func": "//create ColumnMapping and header Line\nlet columnMap = {};\ncounter = 1;\nheader = \"timestamp\";\nfor(let property in msg.completeProductInfo) {\n  columnMap[property] = counter;\n  header = header + \", \" + property;\n  counter = counter + 1;\n}\nnumColumns = counter;\n//list of csvs\ncsvs = []\n//go through list of all occuring timesteps and add all availible info\ntimestamps = msg.timestamps.sort();\nfor (let property in msg.completeProductInfo){\n    csv = \"\"\n    header = \"timestamp, \" + property;\n    csv = header + \"\\n\";\n    index = 0;\n    for(let value of msg.completeProductInfo[property]){\n        line = value.timestamp + \", \" + value.value;\n        csv = csv + line + \"\\n\";\n    }\n    csvs.push({name : property, csv: csv})\n    node.status({fill:\"yellow\",shape:\"dot\",text:\"created \"+ csvs.length +\" csv files\"});\n}\nnode.status({fill:\"green\",shape:\"dot\",text:\"created all \"+ csvs.length +\" csv files\"});\nmsg.payload = csvs;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2370,
        "y": 1060,
        "wires": [
            [
                "fedab9b09c21fc2b"
            ]
        ]
    },
    {
        "id": "b66837e3a2c80a25",
        "type": "delay",
        "z": "28344a0f0587eb28",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "5",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1780,
        "y": 1060,
        "wires": [
            [
                "0f3b8bea66a303cb"
            ]
        ]
    },
    {
        "id": "f93f10547290999d",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "set put parameters",
        "func": "msg.stream = msg.payload.objectData;\nmsg.objectName = \"static/\" + msg.objectName;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2610,
        "y": 1220,
        "wires": [
            [
                "3c833658d4487c3b"
            ]
        ]
    },
    {
        "id": "388e99cdafc70843",
        "type": "comment",
        "z": "28344a0f0587eb28",
        "name": "static values",
        "info": "",
        "x": 1210,
        "y": 1180,
        "wires": []
    },
    {
        "id": "131d1bb34e6edbe4",
        "type": "subflow:48bb845c784563a6",
        "z": "28344a0f0587eb28",
        "name": "",
        "env": [
            {
                "name": "bucketName",
                "value": "bronze-zone",
                "type": "str"
            },
            {
                "name": "recursive",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 1530,
        "y": 1220,
        "wires": [
            [
                "72fff446abbd1eae"
            ]
        ]
    },
    {
        "id": "fedab9b09c21fc2b",
        "type": "split",
        "z": "28344a0f0587eb28",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 2590,
        "y": 1060,
        "wires": [
            [
                "c81879148aac27e1"
            ]
        ]
    },
    {
        "id": "518271985d5249cb",
        "type": "change",
        "z": "28344a0f0587eb28",
        "name": "set prefix to jobstate",
        "rules": [
            {
                "t": "set",
                "p": "prefix",
                "pt": "msg",
                "to": "jobstate/",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 1040,
        "wires": [
            [
                "712ebe43d0514af8"
            ]
        ]
    },
    {
        "id": "60ac0eb7865f8920",
        "type": "change",
        "z": "28344a0f0587eb28",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "prefix",
                "pt": "msg",
                "to": "camera/",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1260,
        "y": 1220,
        "wires": [
            [
                "131d1bb34e6edbe4"
            ]
        ]
    },
    {
        "id": "72fff446abbd1eae",
        "type": "delay",
        "z": "28344a0f0587eb28",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "5",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1780,
        "y": 1220,
        "wires": [
            [
                "f93f10547290999d"
            ]
        ]
    },
    {
        "id": "7844f504d9fa2ba3",
        "type": "change",
        "z": "28344a0f0587eb28",
        "name": "set prefix to printerstate",
        "rules": [
            {
                "t": "set",
                "p": "prefix",
                "pt": "msg",
                "to": "printerstate/",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1210,
        "y": 1080,
        "wires": [
            [
                "d39d6f7bca481a4b"
            ]
        ]
    },
    {
        "id": "d39d6f7bca481a4b",
        "type": "subflow:48bb845c784563a6",
        "z": "28344a0f0587eb28",
        "name": "",
        "env": [
            {
                "name": "bucketName",
                "value": "bronze-zone",
                "type": "str"
            }
        ],
        "x": 1520,
        "y": 1100,
        "wires": [
            [
                "7b758555b146eeff"
            ]
        ]
    },
    {
        "id": "7b758555b146eeff",
        "type": "delay",
        "z": "28344a0f0587eb28",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "5",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1790,
        "y": 1120,
        "wires": [
            [
                "4136c119c95f298c"
            ]
        ]
    },
    {
        "id": "4136c119c95f298c",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "get all Values",
        "func": "function getAllObjectValues(object){\n        for(var k in object) { \n            if(object[k] && typeof object[k] === 'object' && object[k].constructor === Object){\n                getAllObjectValues(object[k]);\n            }else{\n                result.data[k] = object[k];\n            }\n        }\n}\n\n//if msg comes from get object node then set productlist\nif(msg.payload.getObject === true){\n    productList = context.get(\"productList\");\n    objectData = JSON.parse(msg.payload.objectData);\n    result = {};\n    result.data ={};\n    if(objectData && typeof objectData === 'object' && objectData.constructor === Object){\n        getAllObjectValues(objectData);\n    }else{\n        result.data[\"test\"] = objectData;\n    }\n    result.metaData = msg.metaData;\n    productList.push(result);\n    context.set(\"productList\", productList);\n}else{\n    msg.error(\"getobject was false\")\n}\n\nproductList = context.get(\"productList\");\nif(productList!==undefined){\n    if(productList.length === msg.objectList.length){\n        msg.productList = productList;\n        context.set(\"productList\", []);\n        context.set(\"counter\", context.get(\"counter\")+1);\n        node.status({fill:\"green\",shape:\"dot\",text:\"got variables of \"+ context.get(\"counter\") +\" sources\"});\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Der Code hier wird ausgeführt,\n// wenn der Node gestartet wird\ncontext.set(\"productList\", []);\ncontext.set(\"counter\", 0);",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 1120,
        "wires": [
            [
                "b43a4a1ba2efd486"
            ]
        ]
    },
    {
        "id": "968a26153d930b2a",
        "type": "comment",
        "z": "28344a0f0587eb28",
        "name": "dynamic values",
        "info": "",
        "x": 1140,
        "y": 700,
        "wires": []
    },
    {
        "id": "83c097198131b917",
        "type": "comment",
        "z": "28344a0f0587eb28",
        "name": "dynamic values",
        "info": "",
        "x": 1200,
        "y": 1000,
        "wires": []
    },
    {
        "id": "fa862d2e5f4ad221",
        "type": "debug",
        "z": "28344a0f0587eb28",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2530,
        "y": 840,
        "wires": []
    },
    {
        "id": "31e5bfd4cfee121a",
        "type": "comment",
        "z": "28344a0f0587eb28",
        "name": "populate diamond chargewise",
        "info": "",
        "x": 180,
        "y": 1520,
        "wires": []
    },
    {
        "id": "76cf11fba0b9129c",
        "type": "inject",
        "z": "28344a0f0587eb28",
        "name": "start populating diamond",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 1560,
        "wires": [
            [
                "e9690ea41aab2b12"
            ]
        ]
    },
    {
        "id": "1a6e62a4d66268b6",
        "type": "buckets",
        "z": "28344a0f0587eb28",
        "buckets_name": "list objects",
        "host": "a2274fa9a4058cf2",
        "buckets_operation": "listObjectsV2WithMetadata",
        "buckets_bucket": "gold-zone",
        "buckets_region": "",
        "buckets_prefix": "",
        "buckets_recursive": false,
        "buckets_start_after": "",
        "x": 630,
        "y": 1560,
        "wires": [
            [
                "54229432b09f74c9"
            ],
            []
        ]
    },
    {
        "id": "e9690ea41aab2b12",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "start after last checked Object",
        "func": "lastCheckedProduct = flow.get(\"lastCheckedProduct\")\nif ( (lastCheckedProduct !== undefined)){\n    //msg.startAfter = lastCheckedObject\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1560,
        "wires": [
            [
                "1a6e62a4d66268b6"
            ]
        ]
    },
    {
        "id": "45d8fa60c5781a6c",
        "type": "split",
        "z": "28344a0f0587eb28",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 970,
        "y": 1560,
        "wires": [
            [
                "345e14e831c80aed"
            ]
        ]
    },
    {
        "id": "adaff69faf4a5a3f",
        "type": "switch",
        "z": "28344a0f0587eb28",
        "name": "if not null",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2980,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "345e14e831c80aed",
        "type": "delay",
        "z": "28344a0f0587eb28",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1140,
        "y": 1560,
        "wires": [
            [
                "7b7e0750aeec57be"
            ]
        ]
    },
    {
        "id": "54229432b09f74c9",
        "type": "change",
        "z": "28344a0f0587eb28",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.listObjectsV2WithMetadata",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 1560,
        "wires": [
            [
                "45d8fa60c5781a6c"
            ]
        ]
    },
    {
        "id": "7b7e0750aeec57be",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "",
        "func": "msg.objectName = msg.payload.prefix + \"staticInfo.json\";\nmsg.productId = msg.payload.prefix.split(\"/\")[0];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 1560,
        "wires": [
            [
                "9f215bd547268ab5"
            ]
        ]
    },
    {
        "id": "490f96f1e8201145",
        "type": "comment",
        "z": "28344a0f0587eb28",
        "name": "dynamic values",
        "info": "",
        "x": 1160,
        "y": 1520,
        "wires": []
    },
    {
        "id": "9f215bd547268ab5",
        "type": "objects",
        "z": "28344a0f0587eb28",
        "objects_name": "",
        "host": "a2274fa9a4058cf2",
        "objects_operation": "statObject",
        "objects_bucket": "gold-zone",
        "objects_object": "",
        "objects_offset": "",
        "objects_length": "",
        "objects_stream": "",
        "objects_size": "",
        "objects_metadata": "",
        "objects_sourceobject": "gold-zone/1/staticInfo.json",
        "objects_conditions": "",
        "objects_objectslist": [],
        "objects_prefix": "",
        "objects_etag": "",
        "objects_datetime": "",
        "x": 1490,
        "y": 1560,
        "wires": [
            [
                "64aef372014e119c"
            ],
            []
        ]
    },
    {
        "id": "64aef372014e119c",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "",
        "func": "metaData = msg.payload.stat.metaData;\nif(metaData[\"charge\"] !== undefined){\n    msg.charge = metaData[\"charge\"]\n}\nmsg.prefix = msg.productId +\"/\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 1560,
        "wires": [
            [
                "07e1c65765de1f38"
            ]
        ]
    },
    {
        "id": "07e1c65765de1f38",
        "type": "buckets",
        "z": "28344a0f0587eb28",
        "buckets_name": "",
        "host": "a2274fa9a4058cf2",
        "buckets_operation": "listObjectsV2WithMetadata",
        "buckets_bucket": "gold-zone",
        "buckets_region": "",
        "buckets_prefix": "msg.id",
        "buckets_recursive": true,
        "buckets_start_after": "",
        "x": 1830,
        "y": 1560,
        "wires": [
            [
                "e81ee8a8da1949c0"
            ],
            []
        ]
    },
    {
        "id": "96f312b78c482d6b",
        "type": "split",
        "z": "28344a0f0587eb28",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 2190,
        "y": 1560,
        "wires": [
            [
                "cddb5e187c88ddf6"
            ]
        ]
    },
    {
        "id": "e81ee8a8da1949c0",
        "type": "change",
        "z": "28344a0f0587eb28",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.listObjectsV2WithMetadata",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2030,
        "y": 1560,
        "wires": [
            [
                "96f312b78c482d6b"
            ]
        ]
    },
    {
        "id": "ceec34049428d5ee",
        "type": "objects",
        "z": "28344a0f0587eb28",
        "objects_name": "",
        "host": "a2274fa9a4058cf2",
        "objects_operation": "copyObject",
        "objects_bucket": "diamond-zone",
        "objects_object": "",
        "objects_offset": "",
        "objects_length": "",
        "objects_stream": "",
        "objects_size": "",
        "objects_metadata": "",
        "objects_sourceobject": "",
        "objects_conditions": "copyDefault",
        "objects_objectslist": [],
        "objects_prefix": "",
        "objects_etag": "",
        "objects_datetime": "",
        "x": 2790,
        "y": 1560,
        "wires": [
            [],
            [
                "adaff69faf4a5a3f"
            ]
        ]
    },
    {
        "id": "87d044c3e4ff0345",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "set copy parameters",
        "func": "msg.sourceObject = \"gold-zone/\" + msg.payload.name;\nmsg.objectName = msg.charge + \"/\" + msg.payload.name;\n\n//extend metaData\nmsg.metaData = msg.payload.metadata;\nmsg.metaData[\"charge\"] = msg.charge;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2580,
        "y": 1560,
        "wires": [
            [
                "ceec34049428d5ee"
            ]
        ]
    },
    {
        "id": "cddb5e187c88ddf6",
        "type": "delay",
        "z": "28344a0f0587eb28",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "3",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2360,
        "y": 1560,
        "wires": [
            [
                "87d044c3e4ff0345"
            ]
        ]
    },
    {
        "id": "a3c5bcb1c586577c",
        "type": "objects",
        "z": "28344a0f0587eb28",
        "objects_name": "",
        "host": "a2274fa9a4058cf2",
        "objects_operation": "putObject",
        "objects_bucket": "gold-zone",
        "objects_object": "",
        "objects_offset": "",
        "objects_length": "",
        "objects_stream": "",
        "objects_size": "",
        "objects_metadata": "",
        "objects_sourceobject": "",
        "objects_conditions": "",
        "objects_objectslist": [],
        "objects_prefix": "",
        "objects_etag": "",
        "objects_datetime": "",
        "x": 2790,
        "y": 900,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "05cde1208528a610",
        "type": "comment",
        "z": "28344a0f0587eb28",
        "name": "combine dynamic values per charge",
        "info": "",
        "x": 200,
        "y": 1780,
        "wires": []
    },
    {
        "id": "ee2ee1feed6728d0",
        "type": "inject",
        "z": "28344a0f0587eb28",
        "name": "start populating diamond",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 1820,
        "wires": [
            [
                "501b2dd41254e0f2"
            ]
        ]
    },
    {
        "id": "32863fe2c66a60af",
        "type": "buckets",
        "z": "28344a0f0587eb28",
        "buckets_name": "list objects",
        "host": "a2274fa9a4058cf2",
        "buckets_operation": "listObjectsV2WithMetadata",
        "buckets_bucket": "diamond-zone",
        "buckets_region": "",
        "buckets_prefix": "",
        "buckets_recursive": false,
        "buckets_start_after": "",
        "x": 630,
        "y": 1820,
        "wires": [
            [
                "bd853ddaa76ec359"
            ],
            []
        ]
    },
    {
        "id": "501b2dd41254e0f2",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "start after last checked Object",
        "func": "lastCheckedProduct = flow.get(\"lastCheckedProduct\")\nif ( (lastCheckedProduct !== undefined)){\n    //msg.startAfter = lastCheckedObject\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1820,
        "wires": [
            [
                "32863fe2c66a60af"
            ]
        ]
    },
    {
        "id": "dee7611907afc66d",
        "type": "split",
        "z": "28344a0f0587eb28",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 970,
        "y": 1820,
        "wires": [
            [
                "9ab30b23438830ea"
            ]
        ]
    },
    {
        "id": "bd853ddaa76ec359",
        "type": "change",
        "z": "28344a0f0587eb28",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.listObjectsV2WithMetadata",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 1820,
        "wires": [
            [
                "dee7611907afc66d"
            ]
        ]
    },
    {
        "id": "9ab30b23438830ea",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "",
        "func": "msg.prefix = msg.payload.prefix;\nmsg.charge = msg.payload.prefix.split(\"/\")[0];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 1820,
        "wires": [
            [
                "b7bd1ca210ee0bab"
            ]
        ]
    },
    {
        "id": "7e08d7a95a018fed",
        "type": "buckets",
        "z": "28344a0f0587eb28",
        "buckets_name": "list products per charge",
        "host": "a2274fa9a4058cf2",
        "buckets_operation": "listObjectsV2WithMetadata",
        "buckets_bucket": "diamond-zone",
        "buckets_region": "",
        "buckets_prefix": "",
        "buckets_recursive": false,
        "buckets_start_after": "",
        "x": 1290,
        "y": 1820,
        "wires": [
            [
                "26819aad9d4fb729"
            ],
            []
        ]
    },
    {
        "id": "6d17781d70da7f18",
        "type": "split",
        "z": "28344a0f0587eb28",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1670,
        "y": 1820,
        "wires": [
            [
                "646e9369678cbdd8"
            ]
        ]
    },
    {
        "id": "26819aad9d4fb729",
        "type": "change",
        "z": "28344a0f0587eb28",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.listObjectsV2WithMetadata",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "parts",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1510,
        "y": 1820,
        "wires": [
            [
                "6d17781d70da7f18"
            ]
        ]
    },
    {
        "id": "646e9369678cbdd8",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "",
        "func": "msg.objectName =  msg.payload.prefix + \"dynamicValues.csv\";\nmsg.productId = msg.payload.prefix.split(\"/\")[1]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 1820,
        "wires": [
            [
                "afed409e91981904"
            ]
        ]
    },
    {
        "id": "afed409e91981904",
        "type": "objects",
        "z": "28344a0f0587eb28",
        "objects_name": "",
        "host": "a2274fa9a4058cf2",
        "objects_operation": "getObject",
        "objects_bucket": "diamond-zone",
        "objects_object": "",
        "objects_offset": "",
        "objects_length": "",
        "objects_stream": "",
        "objects_size": "",
        "objects_metadata": "",
        "objects_sourceobject": "gold-zone/1/staticInfo.json",
        "objects_conditions": "",
        "objects_objectslist": [],
        "objects_prefix": "",
        "objects_etag": "",
        "objects_datetime": "",
        "x": 1970,
        "y": 1820,
        "wires": [
            [
                "2d6a092cd50ad599"
            ],
            []
        ]
    },
    {
        "id": "2f783d9d0e44299e",
        "type": "join",
        "z": "28344a0f0587eb28",
        "name": "combine all products of one charge",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2820,
        "y": 1920,
        "wires": [
            [
                "c9c5ec0756238645"
            ]
        ]
    },
    {
        "id": "887e2d0ac8a7a648",
        "type": "debug",
        "z": "28344a0f0587eb28",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3130,
        "y": 1740,
        "wires": []
    },
    {
        "id": "2d6a092cd50ad599",
        "type": "change",
        "z": "28344a0f0587eb28",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.objectData",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2210,
        "y": 1820,
        "wires": [
            [
                "0fc0cb6684f5c5a7"
            ]
        ]
    },
    {
        "id": "029ab926216090dc",
        "type": "csv",
        "z": "28344a0f0587eb28",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2610,
        "y": 1820,
        "wires": [
            [
                "20f6b13fee42b236"
            ]
        ]
    },
    {
        "id": "0fc0cb6684f5c5a7",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "Buffer to String",
        "func": "msg.payload = msg.payload.toString();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2440,
        "y": 1820,
        "wires": [
            [
                "029ab926216090dc"
            ]
        ]
    },
    {
        "id": "c9c5ec0756238645",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "combine to one csv",
        "func": "//input variables\nproductId = msg.productId;\npayload = msg.payload;\n\n/*\n    create a object of all used timestamps and their data\n    \n    result looks something like this\n    timesteps = {\n                    0000000:    [   \n                                    {product1/variable1: value, ...},\n                                    {product2/variable1: value, ...}\n                                    ...\n                                ],\n                    0000100:    [   \n                                    {product1/variable1: value, ...},\n                                    {product2/variable1: value, ...}\n                                    ...\n                                ]\n    }\n*/\nvar timesteps = {};\nfor(let productCsv of payload){\n    for(let row of productCsv){\n       if(timesteps[row.normalizedTimestamp] === undefined){\n            timesteps[row.normalizedTimestamp] = [row];\n        }else{\n            timesteps[row.normalizedTimestamp].push(row)\n        }\n    }\n}\n\n/*\n    combines this into the accepted format for the csv node:\n    \n    payload: [\n                {timestep: value, product1/varable1: value, product2/varable2: value},\n                {timestep: value, product1/varable1: value, product2/varable1: value},\n                ...\n            ]\n\n*/\nnew_payload = [];\nfor(let timestep in timesteps){\n    temp = {};\n    for(let productPart of timesteps[timestep]){\n        msg.productPart = productPart;\n        for(var property in productPart){\n            msg.property = property\n            temp[property] = productPart[property];\n        }\n    }\n    new_payload.push(temp);\n}\n\n\n//output_Object\nmsg.payload = new_payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2970,
        "y": 1820,
        "wires": [
            [
                "ffbbbc8d720d3e12"
            ]
        ]
    },
    {
        "id": "20f6b13fee42b236",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "add id to column names",
        "func": "/*\n-iterate through all columns and add productId for identification\n-not add productId to normalized Timestamp for easy comparison\n    and combination into one csv\n*/\nfor(let timestep of msg.payload){\n    for(let key of Object.keys(timestep)){\n        if(key !== \"normalizedTimestamp\"){\n            timestep[msg.productId + \"/\" + key] = timestep[key];\n            delete timestep[key];\n        }\n    }\n}\n\n//save the columns without producId for mean calculation later\nmsg.oldColumns = msg.columns\n/*\n//also change column Names (not needed)\ncolumnArray = msg.columns.split(\",\");\nnew_columns = \"normalizedTimestamp\";\nfor (let columnName of columnArray){\n    new_columns = new_columns +\",\"+ msg.productId + \"/\" +columnName;\n}\nmsg.columns = new_columns;\n*/\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 1760,
        "wires": [
            [
                "2f783d9d0e44299e"
            ]
        ]
    },
    {
        "id": "b7bd1ca210ee0bab",
        "type": "delay",
        "z": "28344a0f0587eb28",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1180,
        "y": 1740,
        "wires": [
            [
                "7e08d7a95a018fed"
            ]
        ]
    },
    {
        "id": "ffbbbc8d720d3e12",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "calculate means",
        "func": "oldColumns = msg.oldColumns;\npayload = msg.payload;\n\nfor(var column of oldColumns.split(\",\")){\n    for(var timestep of payload){\n        var value_sum = 0;\n        var value_number = 0;\n        for(var property in timestep){\n            if(property.split(\"/\")[1] == column){\n                if(!isNaN(timestep[property])){\n                    value_sum = value_sum + timestep[property];\n                    value_number = value_number + 1;\n                }\n            }\n        }\n        if(value_sum != 0 && value_number != 0){\n            timestep[\"mean/\"+column] = value_sum/value_number;\n        }\n    }\n}\n\ncolumns = [];\nfor(var step of payload){\n    for(var prop in step){\n        if(columns.indexOf(prop) == -1){\n            columns.push(prop);\n        }\n    }\n}\ncolumnString = \"normalizedTimestamp\"\nfor(var name of columns){\n    columnString = columnString + \",\" + name;\n}\n\nmsg.columns = columnString;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3250,
        "y": 1860,
        "wires": [
            [
                "109c4330f8858c58"
            ]
        ]
    },
    {
        "id": "109c4330f8858c58",
        "type": "csv",
        "z": "28344a0f0587eb28",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3430,
        "y": 1860,
        "wires": [
            [
                "45d64f25d2b1dbdc"
            ]
        ]
    },
    {
        "id": "dd328c0e8520f7bd",
        "type": "objects",
        "z": "28344a0f0587eb28",
        "objects_name": "",
        "host": "a2274fa9a4058cf2",
        "objects_operation": "putObject",
        "objects_bucket": "diamond-zone",
        "objects_object": "",
        "objects_offset": "",
        "objects_length": "",
        "objects_stream": "",
        "objects_size": "",
        "objects_metadata": "",
        "objects_sourceobject": "",
        "objects_conditions": "",
        "objects_objectslist": [],
        "objects_prefix": "",
        "objects_etag": "",
        "objects_datetime": "",
        "x": 3730,
        "y": 1860,
        "wires": [
            [
                "887e2d0ac8a7a648"
            ],
            []
        ]
    },
    {
        "id": "45d64f25d2b1dbdc",
        "type": "function",
        "z": "28344a0f0587eb28",
        "name": "",
        "func": "msg.objectName = msg.charge + \"/dynamicValues.csv\"\nmsg.stream = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3560,
        "y": 1860,
        "wires": [
            [
                "dd328c0e8520f7bd"
            ]
        ]
    },
    {
        "id": "9dcf1b27a7b22f85",
        "type": "comment",
        "z": "28344a0f0587eb28",
        "name": "todo: mehr durch copy node ersetzen. weniger rechenaufwand, weniger fehler anfällig....",
        "info": "",
        "x": 820,
        "y": 340,
        "wires": []
    },
    {
        "id": "1702e44e35c72199",
        "type": "comment",
        "z": "28344a0f0587eb28",
        "name": "todo: minio put nodes umschreiben. zu viele Nachrichten aufeinmal gehen verloren",
        "info": "",
        "x": 2630,
        "y": 660,
        "wires": []
    },
    {
        "id": "6f37c7132a53d0e1",
        "type": "http request",
        "z": "6027960fa0000f0b",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 690,
        "y": 100,
        "wires": [
            [
                "42f61a2e8dfb179d"
            ]
        ]
    },
    {
        "id": "0767cd5820690d34",
        "type": "inject",
        "z": "6027960fa0000f0b",
        "name": "list image objects",
        "props": [
            {
                "p": "bucketName",
                "v": "bronze-zone",
                "vt": "str"
            },
            {
                "p": "prefix",
                "v": "camera/",
                "vt": "str"
            },
            {
                "p": "url",
                "v": "AAS/api/camera",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 260,
        "y": 40,
        "wires": [
            [
                "9e5ada73b141f0c6"
            ]
        ]
    },
    {
        "id": "42f61a2e8dfb179d",
        "type": "debug",
        "z": "6027960fa0000f0b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 100,
        "wires": []
    },
    {
        "id": "b8ff7eeed1356eea",
        "type": "inject",
        "z": "6027960fa0000f0b",
        "name": "list job status",
        "props": [
            {
                "p": "bucketName",
                "v": "bronze-zone",
                "vt": "str"
            },
            {
                "p": "prefix",
                "v": "jobState/",
                "vt": "str"
            },
            {
                "p": "url",
                "v": "AAS/api/job",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 270,
        "y": 80,
        "wires": [
            [
                "9e5ada73b141f0c6"
            ]
        ]
    },
    {
        "id": "4b8ce0a29f949816",
        "type": "inject",
        "z": "6027960fa0000f0b",
        "name": "list printer status",
        "props": [
            {
                "p": "bucketName",
                "v": "bronze-zone",
                "vt": "str"
            },
            {
                "p": "prefix",
                "v": "printerState/",
                "vt": "str"
            },
            {
                "p": "url",
                "v": "AAS/api/printer",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 260,
        "y": 120,
        "wires": [
            [
                "9e5ada73b141f0c6"
            ]
        ]
    },
    {
        "id": "9e5ada73b141f0c6",
        "type": "function",
        "z": "6027960fa0000f0b",
        "name": "set url",
        "func": "msg.url = \"127.0.0.1:1880\" + msg.url\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 100,
        "wires": [
            [
                "6f37c7132a53d0e1"
            ]
        ]
    },
    {
        "id": "61df23f45cdc783c",
        "type": "inject",
        "z": "6027960fa0000f0b",
        "name": "get",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "url",
                "v": "/AAS/api/get",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"bucketName\": \"test\", \"objectName\": \"test\"}",
        "payloadType": "json",
        "x": 290,
        "y": 160,
        "wires": [
            [
                "9e5ada73b141f0c6"
            ]
        ]
    },
    {
        "id": "0f065e546ad83eb2",
        "type": "inject",
        "z": "6027960fa0000f0b",
        "name": "get products",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "url",
                "v": "/AAS/api/products",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"id\": 2}",
        "payloadType": "json",
        "x": 270,
        "y": 400,
        "wires": [
            [
                "8d5282189451818e"
            ]
        ]
    },
    {
        "id": "8b0acef6910874c6",
        "type": "http request",
        "z": "6027960fa0000f0b",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 630,
        "y": 400,
        "wires": [
            [
                "42f61a2e8dfb179d"
            ]
        ]
    },
    {
        "id": "8d5282189451818e",
        "type": "function",
        "z": "6027960fa0000f0b",
        "name": "set url",
        "func": "msg.url = \"127.0.0.1:1880\" + msg.url\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 400,
        "wires": [
            [
                "8b0acef6910874c6"
            ]
        ]
    },
    {
        "id": "f385f9eccc0ab21f",
        "type": "inject",
        "z": "6027960fa0000f0b",
        "name": "get timebased camera",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "url",
                "v": "/AAS/api/time",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"name\": \"camera\", \"startTime\": 1643837254964, \"endTime\": 1643837275004}",
        "payloadType": "json",
        "x": 240,
        "y": 460,
        "wires": [
            [
                "3a8673502070fdb2"
            ]
        ]
    },
    {
        "id": "3a8673502070fdb2",
        "type": "function",
        "z": "6027960fa0000f0b",
        "name": "set url",
        "func": "msg.url = \"127.0.0.1:1880\" + msg.url\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 460,
        "wires": [
            [
                "8b0acef6910874c6"
            ]
        ]
    },
    {
        "id": "68826c0d568e17e7",
        "type": "inject",
        "z": "6027960fa0000f0b",
        "name": "get timebased analog value",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "url",
                "v": "/AAS/api/time",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"name\": \"actual\", \"startTime\": 1643282705557, \"endTime\": 1643284616368}",
        "payloadType": "json",
        "x": 220,
        "y": 520,
        "wires": [
            [
                "7bf1ef57b0804fa4"
            ]
        ]
    },
    {
        "id": "7bf1ef57b0804fa4",
        "type": "function",
        "z": "6027960fa0000f0b",
        "name": "set url",
        "func": "msg.url = \"127.0.0.1:1880\" + msg.url\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 520,
        "wires": [
            [
                "8b0acef6910874c6"
            ]
        ]
    },
    {
        "id": "953643b8253e0313",
        "type": "ui_chart",
        "z": "47942db286310cd7",
        "d": true,
        "name": "",
        "group": "5f9c4a7ed3853531",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 930,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "eb151baf844e0acb",
        "type": "csv",
        "z": "47942db286310cd7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 630,
        "y": 100,
        "wires": [
            [
                "f97bf569059c8f8d"
            ]
        ]
    },
    {
        "id": "f97bf569059c8f8d",
        "type": "function",
        "z": "47942db286310cd7",
        "name": "graph generate",
        "func": "\nfunction toTimestamp(strDate){\n     var datum = Date.parse(strDate);\n     return datum/1000;\n    }\nvar payload=msg.payload;\n\n\nvar data_out=[];\nvar a1=[];\nvar a2=[];\nvar a3=[];\nvar a4=[];\nfor(let i=0;i<payload.length;i++)\n{\n/*  \nvar Data= payload[i].Data.split(\"-\");\nvar t=Data[2]+\"/\"+Data[1]+\"/\"+Data[0];\nvar timestamp=toTimestamp(t+\" \"+payload[i][\"Godzina\"]);\n*/\n\nvar temp1={ \"x\": payload[i].timestamp, \"y\":parseInt( payload[i][\"actual\"]) };\n//var temp2={ \"x\": timestamp, \"y\":parseInt( payload[i][\"Wilg_RS-485\"]) };\n//var temp3={ \"x\": timestamp, \"y\": parseInt(payload[i][\"Temperatura I\"])};\n//var temp4={\"x\": timestamp, \"y\": parseInt(payload[i][\"Wilgotność I\"])};\n\na1.push(temp1);\n//a2.push(temp2);\n//a3.push(temp3);\n//a4.push(temp4);\n \n \n //\n \n \n}\n\ndata_out=[a1];\nmsg.payload=[{\n\"series\": [\"actual\"],\n\"data\":data_out,\n\"labels\": [\"actual\"]\n}];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 100,
        "wires": [
            [
                "953643b8253e0313"
            ]
        ]
    },
    {
        "id": "7bc62f4f8deedd53",
        "type": "function",
        "z": "47942db286310cd7",
        "name": "set url",
        "func": "msg.url = \"127.0.0.1:1880\" + msg.url\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 100,
        "wires": [
            [
                "cb89b69417617cf4"
            ]
        ]
    },
    {
        "id": "cb89b69417617cf4",
        "type": "http request",
        "z": "47942db286310cd7",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 490,
        "y": 100,
        "wires": [
            [
                "eb151baf844e0acb"
            ]
        ]
    },
    {
        "id": "c18b617c44f3ee87",
        "type": "inject",
        "z": "47942db286310cd7",
        "name": "get timebased analog value",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "url",
                "v": "/AAS/api/time",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"name\": \"actual\", \"startTime\": 1643282705557, \"endTime\": 1643284616368}",
        "payloadType": "json",
        "x": 160,
        "y": 100,
        "wires": [
            [
                "7bc62f4f8deedd53"
            ]
        ]
    },
    {
        "id": "1622f777fdefa2ee",
        "type": "ui_chart",
        "z": "47942db286310cd7",
        "name": "",
        "group": "413d7a35da993ae7",
        "order": 4,
        "width": "6",
        "height": "6",
        "label": "Product Variable",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 920,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "0cecaf97a7299b88",
        "type": "function",
        "z": "47942db286310cd7",
        "name": "set url",
        "func": "msg.url = \"127.0.0.1:1880\" + \"/AAS/api/products/var\"\nmsg.payload = {names: msg.payload, ids: flow.get(\"productIds\")}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 560,
        "wires": [
            [
                "1dba6c735bd99521"
            ]
        ]
    },
    {
        "id": "1dba6c735bd99521",
        "type": "http request",
        "z": "47942db286310cd7",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 550,
        "y": 560,
        "wires": [
            [
                "c28bfd6ac86d2b95"
            ]
        ]
    },
    {
        "id": "54c8db56b6cfca1a",
        "type": "inject",
        "z": "47942db286310cd7",
        "name": "testinput",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "url",
                "v": "127.0.0.1:1880/AAS/api/products/var",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"names\": [\"printTime\"], \"ids\":[0, 10]}",
        "payloadType": "json",
        "x": 400,
        "y": 600,
        "wires": [
            [
                "1dba6c735bd99521"
            ]
        ]
    },
    {
        "id": "b25e02afa3850a70",
        "type": "ui_dropdown",
        "z": "47942db286310cd7",
        "name": "select IDs",
        "label": "",
        "tooltip": "",
        "place": "Select Product IDs",
        "group": "413d7a35da993ae7",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": true,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 960,
        "y": 380,
        "wires": [
            [
                "d09d95c11604e891"
            ]
        ]
    },
    {
        "id": "ccee00f0cc621368",
        "type": "inject",
        "z": "47942db286310cd7",
        "name": "set product ids at new deploy",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 380,
        "y": 320,
        "wires": [
            [
                "323e6386f4a7341e"
            ]
        ]
    },
    {
        "id": "c6e9bdc30416858a",
        "type": "function",
        "z": "47942db286310cd7",
        "name": "set IDs as options",
        "func": "msg.payload = msg.payload.listObjectsV2WithMetadata;\nmsg.options = []\nfor (var object of msg.payload){\n    //add the id as option and therefore remove the \"/\"\n    msg.options.push(object.prefix.split(\"/\")[0])\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 380,
        "wires": [
            [
                "b25e02afa3850a70"
            ]
        ]
    },
    {
        "id": "323e6386f4a7341e",
        "type": "buckets",
        "z": "47942db286310cd7",
        "buckets_name": "list products",
        "host": "a2274fa9a4058cf2",
        "buckets_operation": "listObjectsV2WithMetadata",
        "buckets_bucket": "gold-zone",
        "buckets_region": "",
        "buckets_prefix": "",
        "buckets_recursive": false,
        "buckets_start_after": "",
        "x": 610,
        "y": 380,
        "wires": [
            [
                "c6e9bdc30416858a"
            ],
            []
        ]
    },
    {
        "id": "7fc96e908474dc71",
        "type": "ui_dropdown",
        "z": "47942db286310cd7",
        "name": "select variables",
        "label": "",
        "tooltip": "",
        "place": "Select Variable",
        "group": "413d7a35da993ae7",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 900,
        "y": 480,
        "wires": [
            [
                "0cecaf97a7299b88"
            ]
        ]
    },
    {
        "id": "c2eb2a025a196c1f",
        "type": "ui_button",
        "z": "47942db286310cd7",
        "name": "refresh button",
        "group": "413d7a35da993ae7",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "refresh productList",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 420,
        "y": 400,
        "wires": [
            [
                "323e6386f4a7341e"
            ]
        ]
    },
    {
        "id": "284b51e8db107f91",
        "type": "comment",
        "z": "47942db286310cd7",
        "name": "get variable names",
        "info": "",
        "x": 110,
        "y": 480,
        "wires": []
    },
    {
        "id": "3b295cdb8f1f6122",
        "type": "comment",
        "z": "47942db286310cd7",
        "name": "refresh and set product ids",
        "info": "",
        "x": 110,
        "y": 360,
        "wires": []
    },
    {
        "id": "4320cbe5c6d4aceb",
        "type": "comment",
        "z": "47942db286310cd7",
        "name": "get actual Data for chart",
        "info": "",
        "x": 120,
        "y": 580,
        "wires": []
    },
    {
        "id": "3b7b3d2b7ef9d5f1",
        "type": "subflow:f2fe4f59c043dd9d",
        "z": "47942db286310cd7",
        "name": "",
        "env": [
            {
                "name": "bucketName",
                "value": "gold-zone",
                "type": "str"
            }
        ],
        "x": 590,
        "y": 480,
        "wires": [
            [
                "7fc96e908474dc71"
            ]
        ]
    },
    {
        "id": "c28bfd6ac86d2b95",
        "type": "subflow:1ca075c8ba9a118b",
        "z": "47942db286310cd7",
        "name": "",
        "env": [],
        "x": 720,
        "y": 560,
        "wires": [
            [
                "1622f777fdefa2ee",
                "702d47549e5f782c"
            ]
        ]
    },
    {
        "id": "d5b6094938957e9d",
        "type": "ui_dropdown",
        "z": "47942db286310cd7",
        "name": "Select download product",
        "label": "",
        "tooltip": "",
        "place": "Select download product",
        "group": "5bfa078fd03ae78e",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 830,
        "y": 1040,
        "wires": [
            [
                "625c7f96031951ec"
            ]
        ]
    },
    {
        "id": "d08d0be0ef16a964",
        "type": "inject",
        "z": "47942db286310cd7",
        "name": "set product ids at new deploy",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 200,
        "y": 980,
        "wires": [
            [
                "3b8f93e261aa24b1"
            ]
        ]
    },
    {
        "id": "580d3b314b305252",
        "type": "function",
        "z": "47942db286310cd7",
        "name": "set IDs as options",
        "func": "msg.payload = msg.payload.listObjectsV2WithMetadata;\nmsg.options = []\nfor (var object of msg.payload){\n    //add the id as option and therefore remove the \"/\"\n    msg.options.push(object.prefix.split(\"/\")[0])\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1040,
        "wires": [
            [
                "d5b6094938957e9d"
            ]
        ]
    },
    {
        "id": "3b8f93e261aa24b1",
        "type": "buckets",
        "z": "47942db286310cd7",
        "buckets_name": "list products",
        "host": "a2274fa9a4058cf2",
        "buckets_operation": "listObjectsV2WithMetadata",
        "buckets_bucket": "gold-zone",
        "buckets_region": "",
        "buckets_prefix": "",
        "buckets_recursive": false,
        "buckets_start_after": "",
        "x": 430,
        "y": 1040,
        "wires": [
            [
                "580d3b314b305252"
            ],
            []
        ]
    },
    {
        "id": "58e16dc350ff3171",
        "type": "ui_button",
        "z": "47942db286310cd7",
        "name": "refresh button",
        "group": "5bfa078fd03ae78e",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "refresh productList",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 240,
        "y": 1060,
        "wires": [
            [
                "3b8f93e261aa24b1"
            ]
        ]
    },
    {
        "id": "25f73fdb4af3b42d",
        "type": "ui_dropdown",
        "z": "47942db286310cd7",
        "name": "download_id",
        "label": "",
        "tooltip": "",
        "place": "Select item",
        "group": "5bfa078fd03ae78e",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 350,
        "y": 1280,
        "wires": [
            [
                "3042191318d5f294"
            ]
        ]
    },
    {
        "id": "625c7f96031951ec",
        "type": "function",
        "z": "47942db286310cd7",
        "name": "set prefix",
        "func": "flow.set(\"downloadId\", msg.payload);\nmsg.prefix = msg.payload + \"/\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1160,
        "wires": [
            [
                "0c0bb1fa64f3a7de"
            ]
        ]
    },
    {
        "id": "0c0bb1fa64f3a7de",
        "type": "buckets",
        "z": "47942db286310cd7",
        "buckets_name": "list product Objects",
        "host": "a2274fa9a4058cf2",
        "buckets_operation": "listObjectsV2WithMetadata",
        "buckets_bucket": "gold-zone",
        "buckets_region": "",
        "buckets_prefix": "",
        "buckets_recursive": false,
        "buckets_start_after": "",
        "x": 430,
        "y": 1160,
        "wires": [
            [
                "f980684b55d44064"
            ],
            []
        ]
    },
    {
        "id": "f980684b55d44064",
        "type": "function",
        "z": "47942db286310cd7",
        "name": "set Elements as options",
        "func": "msg.payload = msg.payload.listObjectsV2WithMetadata;\nmsg.options = [\"all\"]\nfor (var object of msg.payload){\n    //add the id as option and therefore remove the \"/\"\n    if(object.name !== undefined){\n        msg.options.push(object.name);\n    }else if(object.prefix !== undefined){\n        msg.options.push(object.prefix);\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1160,
        "wires": [
            [
                "25f73fdb4af3b42d"
            ]
        ]
    },
    {
        "id": "d09d95c11604e891",
        "type": "function",
        "z": "47942db286310cd7",
        "name": "",
        "func": "flow.set(\"productIds\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 480,
        "wires": [
            [
                "3b7b3d2b7ef9d5f1"
            ]
        ]
    },
    {
        "id": "b6477f5380e62c39",
        "type": "ui_template",
        "z": "47942db286310cd7",
        "group": "5bfa078fd03ae78e",
        "name": "Download files",
        "order": 4,
        "width": 0,
        "height": 0,
        "format": "<form action=\"/AAS/api/products\" method=\"GET\">\n  <input type=\"hidden\" name=\"id\" value=\"{{msg.id}}\"/>\n  <input type=\"hidden\" name=\"element\" value=\"{{msg.element}}\" />\n  <input type=\"submit\" name=\"downloadButton\" value=\"Download\"/>\n</form>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 740,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "3042191318d5f294",
        "type": "change",
        "z": "47942db286310cd7",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "element",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "id",
                "pt": "msg",
                "to": "downloadId",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 1280,
        "wires": [
            [
                "b6477f5380e62c39"
            ]
        ]
    },
    {
        "id": "e93a57c787f31736",
        "type": "ui_chart",
        "z": "47942db286310cd7",
        "name": "",
        "group": "5f9c4a7ed3853531",
        "order": 4,
        "width": "6",
        "height": "6",
        "label": "charge Variable",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 860,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "d214419b805c7f01",
        "type": "function",
        "z": "47942db286310cd7",
        "name": "set url",
        "func": "msg.url = \"127.0.0.1:1880\" + \"/AAS/api/charges/var\"\nmsg.payload = {names: msg.payload, ids: flow.get(\"chargeIds\")}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1800,
        "wires": [
            [
                "24d49ac66b223f64"
            ]
        ]
    },
    {
        "id": "24d49ac66b223f64",
        "type": "http request",
        "z": "47942db286310cd7",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 510,
        "y": 1800,
        "wires": [
            [
                "285037f489ef67a3",
                "88d117bc698130c1"
            ]
        ]
    },
    {
        "id": "e3273c79937316ef",
        "type": "inject",
        "z": "47942db286310cd7",
        "name": "testinput",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "url",
                "v": "127.0.0.1:1880/AAS/api/products/var",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"names\": [\"printTime\"], \"ids\":[0, 10]}",
        "payloadType": "json",
        "x": 120,
        "y": 1900,
        "wires": [
            [
                "24d49ac66b223f64"
            ]
        ]
    },
    {
        "id": "fa5fcb94aca1304f",
        "type": "ui_dropdown",
        "z": "47942db286310cd7",
        "name": "select IDs",
        "label": "",
        "tooltip": "",
        "place": "Select Product IDs",
        "group": "5f9c4a7ed3853531",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": true,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 940,
        "y": 1580,
        "wires": [
            [
                "6369c41929d17fc2"
            ]
        ]
    },
    {
        "id": "9571f6c152458498",
        "type": "inject",
        "z": "47942db286310cd7",
        "name": "set product ids at new deploy",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 360,
        "y": 1520,
        "wires": [
            [
                "6068d16232e39691"
            ]
        ]
    },
    {
        "id": "c2847d1f99c00c30",
        "type": "function",
        "z": "47942db286310cd7",
        "name": "set IDs as options",
        "func": "msg.payload = msg.payload.listObjectsV2WithMetadata;\nmsg.options = []\nfor (var object of msg.payload){\n    //add the id as option and therefore remove the \"/\"\n    msg.options.push(object.prefix.split(\"/\")[0])\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1580,
        "wires": [
            [
                "fa5fcb94aca1304f"
            ]
        ]
    },
    {
        "id": "6068d16232e39691",
        "type": "buckets",
        "z": "47942db286310cd7",
        "buckets_name": "list charges",
        "host": "a2274fa9a4058cf2",
        "buckets_operation": "listObjectsV2WithMetadata",
        "buckets_bucket": "diamond-zone",
        "buckets_region": "",
        "buckets_prefix": "",
        "buckets_recursive": false,
        "buckets_start_after": "",
        "x": 570,
        "y": 1560,
        "wires": [
            [
                "c2847d1f99c00c30",
                "699ad743a6ad2508"
            ],
            []
        ]
    },
    {
        "id": "eafb5fcda60306d6",
        "type": "ui_dropdown",
        "z": "47942db286310cd7",
        "name": "select variables",
        "label": "",
        "tooltip": "",
        "place": "Select Variable",
        "group": "5f9c4a7ed3853531",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 740,
        "y": 1700,
        "wires": [
            [
                "d214419b805c7f01"
            ]
        ]
    },
    {
        "id": "668bb8434c63f27c",
        "type": "ui_button",
        "z": "47942db286310cd7",
        "name": "refresh button",
        "group": "5f9c4a7ed3853531",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "refresh productList",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 400,
        "y": 1600,
        "wires": [
            [
                "6068d16232e39691"
            ]
        ]
    },
    {
        "id": "cfcd750b2d269b33",
        "type": "comment",
        "z": "47942db286310cd7",
        "name": "get variable names",
        "info": "",
        "x": 150,
        "y": 1680,
        "wires": []
    },
    {
        "id": "5e7e99eea218960d",
        "type": "comment",
        "z": "47942db286310cd7",
        "name": "refresh and set charge ids",
        "info": "",
        "x": 130,
        "y": 1560,
        "wires": []
    },
    {
        "id": "7a0ecb3fb23d384b",
        "type": "comment",
        "z": "47942db286310cd7",
        "name": "get actual Data for chart",
        "info": "",
        "x": 140,
        "y": 1800,
        "wires": []
    },
    {
        "id": "0865f4b1b1894736",
        "type": "subflow:f2fe4f59c043dd9d",
        "z": "47942db286310cd7",
        "name": "",
        "env": [
            {
                "name": "bucketName",
                "value": "diamond-zone",
                "type": "str"
            }
        ],
        "x": 450,
        "y": 1700,
        "wires": [
            [
                "eafb5fcda60306d6"
            ]
        ]
    },
    {
        "id": "285037f489ef67a3",
        "type": "subflow:1ca075c8ba9a118b",
        "z": "47942db286310cd7",
        "name": "",
        "env": [],
        "x": 680,
        "y": 1800,
        "wires": [
            [
                "e93a57c787f31736",
                "88d117bc698130c1"
            ]
        ]
    },
    {
        "id": "48941af4ca4fce9d",
        "type": "comment",
        "z": "47942db286310cd7",
        "name": "download products",
        "info": "",
        "x": 180,
        "y": 900,
        "wires": []
    },
    {
        "id": "88d117bc698130c1",
        "type": "debug",
        "z": "47942db286310cd7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 1880,
        "wires": []
    },
    {
        "id": "699ad743a6ad2508",
        "type": "debug",
        "z": "47942db286310cd7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1500,
        "wires": []
    },
    {
        "id": "702d47549e5f782c",
        "type": "debug",
        "z": "47942db286310cd7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 620,
        "wires": []
    },
    {
        "id": "6369c41929d17fc2",
        "type": "function",
        "z": "47942db286310cd7",
        "name": "",
        "func": "flow.set(\"chargeIds\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1660,
        "wires": [
            [
                "0865f4b1b1894736"
            ]
        ]
    }
]